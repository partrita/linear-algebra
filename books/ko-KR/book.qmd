# 책

### 서곡
*벡터와 공간의 세계로 부드럽게 여러분을 초대합니다. 여기서는 한 걸음 한 걸음이 새로운 여정의 시작입니다.*

1. 기하학의 새벽
```
선들이 고요히 교차하고,
평면은 질서 속에서 깨어나며,
숫자들이 세상을 그린다.
```

2. 배움으로의 초대
```
점들로 첫걸음을 떼고,
화살표는 새로운 길로 뻗어나가며,
여정이 펼쳐진다.
```

3. 빛과 그림자
```
격자 위에 그림자가 드리우고,
숨겨진 형태들이 모습을 드러내니,
명료함이 뿌리내린다.
```

4. 구조의 씨앗
```
하나의 점에서 선으로,
공간은 규칙으로부터 피어나고,
무한이 자라난다.
```

5. 대수학의 속삭임
```
공간의 조용한 규칙들,
생각의 실들이 정렬되고,
질서가 시간을 통해 노래한다.
```

6. 초심자를 위한 환영
```
빈 페이지가 기다리고,
축들은 이끄는 손처럼 교차하며,
첫걸음이 자리를 찾는다.
```

7. 영원한 길
```
벡터에서 별까지,
방정식은 운명을 그리고,
패턴이 우리의 시야를 이끈다.
```

---

## 제1장. 벡터, 스칼라, 그리고 기하학

#### 서시
```
허공의 화살표들,
방향이 부드럽게 속삭이며—
평면이 살아난다.
```

### 1. 스칼라, 벡터, 그리고 좌표계

선형대수학을 처음 배울 때, 모든 것은 가장 단순한 구성 요소인 스칼라와 벡터에서 시작합니다. 스칼라는 3, –7, 또는 π와 같은 단일 숫자입니다. 크기만 있고 방향은 없습니다. 스칼라는 개수를 세거나, 길이를 재거나, 다른 객체를 확대하거나 축소하는 데 사용됩니다. 반면, 벡터는 순서가 있는 숫자들의 모음입니다. 공간에서 어딘가를 가리키는 화살표로 생각하거나, 2D에서는 (2, 5), 3D에서는 (1, –3, 4)와 같은 목록으로 간단히 생각할 수 있습니다. 스칼라가 "얼마나 많이"를 측정한다면, 벡터는 "얼마나 많이"와 "어느 방향으로"를 모두 측정합니다.

#### 좌표계

벡터에 대해 이야기하려면 좌표계가 필요합니다. 종이 위에 두 개의 수직인 축, 즉 x축(왼쪽에서 오른쪽)과 y축(위아래)을 놓는다고 상상해 보세요. 종이 위의 모든 점은 두 개의 숫자로 설명될 수 있습니다: x축을 따라 얼마나 멀리, 그리고 y축을 따라 얼마나 멀리 갔는지. 이 숫자 쌍이 2D 벡터입니다. 페이지에서 위로 솟아나는 z축을 추가하면 3D 공간이 됩니다. 각 좌표계는 근본적인 "공간"은 동일하지만, 벡터를 수치적으로 설명하는 방법을 제공합니다.

#### 스칼라 대 벡터 시각화

- 스칼라는 자 위의 눈금 하나와 같습니다.
- 벡터는 원점(0, 0, …)에서 시작하여 그 성분으로 정의된 점에서 끝나는 화살표와 같습니다.
  예를 들어, 2D 벡터 (3, 4)는 원점에서 x축을 따라 3 단위, y축을 따라 4 단위 떨어진 점을 가리킵니다.

#### 왜 여기서 시작하는가?

스칼라와 벡터의 차이를 이해하는 것은 선형대수학의 다른 모든 것의 기초입니다. 행렬, 선형 변환, 고유값 등 모든 개념은 결국 벡터를 어떻게 조작하고 스칼라로 어떻게 크기를 조절하는지로 귀결됩니다. 이 구분이 없다면, 이 학문의 나머지 부분은 닻을 내릴 곳이 없을 것입니다.

#### 왜 중요한가

거의 모든 과학 및 공학 분야가 이 아이디어에 의존합니다. 물리학은 속도, 가속도, 힘에 벡터를 사용합니다. 컴퓨터 그래픽스는 점, 색상, 변환을 나타내는 데 벡터를 사용합니다. 데이터 과학은 전체 데이터셋을 고차원 벡터로 취급합니다. 스칼라와 벡터를 일찍 마스터함으로써, 여러분은 현대 과학과 기술이 쓰인 언어를 해독하게 됩니다.

#### 직접 해보기

1. 종이에 x축과 y축을 그리고 벡터 (2, 3)을 그려보세요.
2. 이제 벡터 (–1, 4)를 그려보세요. 두 벡터의 방향과 길이를 비교해 보세요.
3. 생각하기: 두 벡터 중 어느 것이 "더 위쪽을" 가리키나요? 어느 것이 "더 긴가요"?

이 간단한 실험들은 선형대수학에서 계속해서 수행하게 될 연산에 대한 직관을 이미 제공합니다.

### 2. 벡터 표기법, 성분, 그리고 화살표

선형대수학은 벡터를 설명하고 조작하는 강력한 방법을 제공하지만, 그것들을 사용하기 전에 정확한 표기법 시스템이 필요합니다. 표기법은 단지 외관상의 문제가 아니라, 벡터를 명확하고 모호하지 않게 읽고, 쓰고, 생각하는 방법을 알려줍니다. 이 섹션에서는 벡터가 어떻게 쓰이는지, 그 성분들이 어떻게 표현되는지, 그리고 그것들을 시각적으로 화살표로 어떻게 해석할 수 있는지 탐구할 것입니다.

#### 벡터 쓰기

벡터는 보통 굵은 소문자(예: $\mathbf{v}, \mathbf{w}, \mathbf{x}$)나 위에 화살표가 있는 문자(예: $\vec{v}$)로 표기됩니다.

예를 들어, 벡터 $\mathbf{v} = (2, 5)$는 $\vec{v} = (2, 5)$와 같습니다.

스타일은 문맥에 따라 다릅니다: 수학자들은 종종 굵은 글씨를 사용하고, 물리학자들은 종종 화살표를 사용합니다.
손으로 쓴 노트에서는 스칼라와의 혼동을 피하기 위해 벡터에 밑줄을 긋기도 합니다(예: $\underline{v}$).

중요한 것은 벡터와 스칼라를 한눈에 구별하는 것입니다.


#### 벡터의 성분

2차원 벡터는 $(x, y)$와 같이 두 개의 성분을 가집니다.
3차원에서는 $(x, y, z)$와 같이 세 개의 성분을 가집니다.
더 일반적으로, $n$차원 벡터는 $n$개의 성분 $(v_1, v_2, \ldots, v_n)$을 가집니다.
각 성분은 벡터가 좌표계의 한 축을 따라 얼마나 뻗어 있는지를 알려줍니다.

예를 들어:

- $\mathbf{v} = (3, 4)$는 벡터가 x축을 따라 3 단위, y축을 따라 4 단위 뻗어 있음을 의미합니다.
- $\mathbf{w} = (-2, 0, 5)$는 벡터가 x축을 따라 $-2$ 단위, y축을 따라 $0$ 단위, z축을 따라 5 단위 뻗어 있음을 의미합니다.

우리는 종종 벡터 $\mathbf{v}$의 $i$번째 성분을 $v_i$라고 부릅니다.
따라서 $\mathbf{v} = (3, 4, 5)$에 대해 $v_1 = 3$, $v_2 = 4$, $v_3 = 5$입니다.

#### 열벡터 대 행벡터

벡터는 두 가지 일반적인 방식으로 쓸 수 있습니다:

- 행벡터로: $(v_1, v_2, v_3)$
- 열벡터로:

  $$
  \begin{bmatrix}
  v_1 \\
  v_2 \\
  v_3
  \end{bmatrix}
  $$

둘 다 동일한 추상적인 객체를 나타냅니다.
행벡터는 빠르게 쓰기에 편리하지만, 열벡터는 행렬과 곱할 때 차원이 맞아야 하므로 필수적입니다.


#### 화살표로서의 벡터

벡터를 상상하는 가장 직관적인 방법은 화살표로 보는 것입니다:

- 원점(0, 0, …)에서 시작합니다.
- 그 성분으로 주어진 점에서 끝납니다.

예를 들어, 2D 벡터 (2, 3)은 (0, 0)에서 (2, 3)으로 가는 화살표로 그려집니다. 화살표는 방향(어디를 가리키는지)과 크기(길이)를 모두 가집니다. 이 기하학적 그림은 추상적인 대수적 조작을 훨씬 쉽게 파악하게 해줍니다.

#### 위치 벡터 대 자유 벡터

벡터에는 두 가지 일반적인 해석이 있습니다:

1. 위치 벡터 - 원점에서 공간의 특정 지점을 가리키는 벡터. 예: (2, 3)은 점 (2, 3)의 위치 벡터입니다.
2. 자유 벡터 - 길이와 방향은 있지만 특정 시작점에 묶여 있지 않은 화살표. 예를 들어, 북동쪽을 가리키는 길이 5의 화살표는 어디에나 그릴 수 있지만, 여전히 동일한 벡터를 나타냅니다.

선형대수학에서는 종종 벡터를 자유 벡터로 취급하는데, 그 의미가 어디에 그려지는지에 의존하지 않기 때문입니다.

#### 예: 벡터 읽기

u = (–3, 2)라고 가정해 봅시다.

- 첫 번째 성분(–3)은 x축을 따라 왼쪽으로 3 단위 이동함을 의미합니다.
- 두 번째 성분(2)은 y축을 따라 위로 2 단위 이동함을 의미합니다.
  따라서 화살표는 점 (–3, 2)를 가리킵니다. 다이어그램이 없어도 성분들은 화살표가 어떻게 생겼을지 정확히 알려줍니다.

#### 왜 중요한가

명확한 표기법은 선형대수학의 근간입니다. 그것 없이는 방정식이 금방 읽기 어려워지고, 방향과 크기에 대한 직관이 사라집니다. 벡터를 쓰는 방식은 대수(숫자와 기호)를 기하학(화살표와 공간)과 얼마나 쉽게 연결할 수 있는지를 결정합니다. 이 상징적이고 시각적인 이중 관점은 선형대수학을 강력하고 실용적으로 만듭니다.

#### 직접 해보기

1. 벡터 (4, –1)을 쓰고 그래프 용지에 그려보세요.
2. 같은 벡터를 열벡터로 다시 써보세요.
3. 벡터 (4, –1)의 시작점을 원점 대신 (2, 3)으로 옮겨보세요. 화살표는 똑같이 보이지만 시작점만 다릅니다.
4. 더 어려운 도전: 3D 벡터 (2, –1, 3)을 그려보세요. 3D로 완벽하게 그릴 수 없더라도 x, y, z 축을 따라 각 성분을 표시해 보세요.

표기법과 화살표 그림을 모두 연습함으로써, 추상적인 기호와 구체적인 시각화 사이를 자유롭게 전환하는 능력을 개발하게 될 것입니다. 이 기술은 선형대수학의 모든 후속 개념을 훨씬 더 직관적으로 만들어 줄 것입니다.

### 3. 벡터 덧셈과 스칼라 곱셈

벡터를 성분과 화살표로 설명하는 방법을 알았으니, 다음 단계는 그것들을 결합하는 방법을 배우는 것입니다. 두 가지 기본 연산이 선형대수학의 근간을 이룹니다: 벡터를 더하고, 벡터를 숫자(스칼라)로 크기 조절하는 것입니다. 이 두 가지 간단한 움직임은 나중에 우리가 만들 모든 것을 생성합니다. 그것들로 우리는 운동, 힘, 데이터 변환 등을 설명할 수 있습니다.

#### 좌표에서의 벡터 덧셈

2D에 두 벡터가 있다고 가정해 봅시다:
$\mathbf{u} = (u_1, u_2), \quad \mathbf{v} = (v_1, v_2)$.

그 합은 다음과 같이 정의됩니다:
$$
\mathbf{u} + \mathbf{v} = (u_1 + v_1, \; u_2 + v_2).
$$

즉, 해당하는 성분끼리 더합니다.
이것은 더 높은 차원에서도 작동합니다:

$$
(u_1, u_2, \ldots, u_n) + (v_1, v_2, \ldots, v_n) = (u_1 + v_1, \; u_2 + v_2, \; \ldots, \; u_n + v_n).
$$

예:
$$
(2, 3) + (-1, 4) = (2 - 1, \; 3 + 4) = (1, 7).
$$


#### 기하학으로서의 벡터 덧셈

기하학적 그림은 훨씬 더 명확합니다. 벡터 u를 화살표로 그린 다음, u의 머리에 v의 꼬리를 놓으면, u의 시작점에서 v의 머리까지의 화살표가 u + v입니다. 이것을 '끝과 끝을 잇는 규칙'(tip-to-tail rule)이라고 합니다. 평행사변형 규칙은 또 다른 시각화입니다: u와 v를 꼬리끼리 맞대고 평행사변형을 만들면, 그 대각선이 합입니다.

예:
u = (3, 1), v = (2, 2). 둘 다 원점에서 그립니다. 그 합 (5, 3)은 정확히 그들이 만드는 평행사변형의 대각선입니다.

#### 좌표에서의 스칼라 곱셈

스칼라는 벡터를 늘리거나 줄입니다.
$\mathbf{u} = (u_1, u_2, \ldots, u_n)$이고 $c$가 스칼라일 때:

$$
c \cdot \mathbf{u} = (c \cdot u_1, \; c \cdot u_2, \; \ldots, \; c \cdot u_n).
$$

예:

$$
2 \cdot (3, 4) = (6, 8).
$$  

$$
(-1) \cdot (3, 4) = (-3, -4).
$$

양의 스칼라를 곱하면 방향은 그대로 유지하면서 화살표를 늘리거나 압축합니다.
음의 스칼라를 곱하면 화살표가 반대 방향을 가리키도록 뒤집습니다.

#### 기하학으로서의 스칼라 곱셈

벡터 (1, 2)를 상상해 보세요. 그래프 용지에 그리면 오른쪽으로 1, 위로 2 갑니다. 이제 두 배로 하면 (2, 4)가 됩니다. 화살표는 같은 방향을 가리키지만 길이는 두 배입니다. 반으로 줄이면 (0.5, 1)이 됩니다. 방향은 같지만 더 짧습니다. 부호를 바꾸면 (–1, –2)가 됩니다. 이제 화살표는 뒤를 가리킵니다.

이 기하학적 그림은 왜 이 숫자들을 "스칼라"라고 부르는지 설명해 줍니다: 그것들은 벡터를 "크기 조절(scale)"합니다.

#### 둘의 결합: 선형 결합

벡터 덧셈과 스칼라 곱셈은 단지 별개의 기술이 아닙니다. 그것들은 결합하여 선형대수학의 핵심인 선형 결합을 형성합니다.

벡터 $u$와 $v$의 선형 결합은 $a \cdot u + b \cdot v$ 형태의 모든 벡터이며, 여기서 $a$와 $b$는 스칼라입니다.

예:
$u = (1, 0)$이고 $v = (0, 1)$이면,
$3 \cdot u + 2 \cdot v = (3, 2)$입니다.

이것은 격자 위의 모든 점이 이 두 기본 벡터의 크기를 조절하고 더함으로써 도달할 수 있음을 보여줍니다.
이것이 공간을 구성하는 본질입니다.

#### 대수적 속성

벡터 덧셈과 스칼라 곱셈은 숫자 산술과 유사한 규칙을 따릅니다:

- 교환 법칙: $u + v = v + u$
- 결합 법칙: $(u + v) + w = u + (v + w)$
- 스칼라에 대한 분배 법칙: $c \cdot (u + v) = c \cdot u + c \cdot v$
- 숫자에 대한 분배 법칙: $(a + b) \cdot u = a \cdot u + b \cdot u$

이 규칙들은 사소한 장부 정리가 아닙니다. 그것들은 선형대수학이 예측 가능하게 작동하도록 보장하며, 이것이 과학의 언어로 작동하는 이유입니다.

#### 일상적인 비유

- 걷기 방향: 북쪽으로 3걸음, 동쪽으로 4걸음 걷는 것은 (0, 3) + (4, 0) = (4, 3)을 더하는 것과 같습니다.
- 물리학의 힘: 두 사람이 상자를 다른 방향으로 밀면, 총 힘은 그들의 밀기 벡터의 합입니다.
- 예산 계획: 수입과 지출을 숫자 벡터로 생각하세요. 그것들을 결합하는 것은 단지 벡터 덧셈입니다.

#### 왜 중요한가

덧셈과 크기 조절이라는 이 두 가지 연산만으로도 선, 평면, 그리고 전체 공간을 이미 설명할 수 있습니다. 물리학, 경제학, 기계 학습과 같이 영향력을 결합하여 성장하는 모든 시스템은 이 간단한 규칙 위에 구축됩니다. 나중에 행렬 곱셈, 내적, 고유값을 정의할 때, 그것들은 모두 벡터를 더하고 크기를 조절하는 반복적인 패턴으로 귀결됩니다.

#### 직접 해보기

1. (2, 3)과 (–1, 4)를 더하고, 결과를 그래프 용지에 그려보세요.
2. (1, –2)에 3을 곱한 다음, (0, 5)를 더하세요. 최종 벡터는 무엇인가요?
3. 더 깊은 도전: u = (1, 2)와 v = (2, –1)이라 할 때, a와 b가 –2와 2 사이의 정수 값일 때 a·u + b·v 형태의 모든 벡터를 스케치해 보세요. 여러분이 만드는 점들의 격자를 주목하세요. 그것이 이 두 벡터의 생성(span)입니다.

이 간단한 연습은 덧셈과 크기 조절을 통해 두 개의 기본 벡터를 결합하는 것이 어떻게 전체 구조화된 공간을 생성하는지 보여주며, 선형대수학의 진정한 힘의 첫 번째 모습을 보여줍니다.

### 4. 선형 결합과 생성(Span)

벡터를 더하고 크기를 조절하는 법을 배운 후, 자연스러운 다음 질문은 *이 두 연산으로 무엇을 만들 수 있는가?* 입니다. 그 답은 선형 결합이라는 개념으로, 이는 선형대수학에서 가장 근본적인 아이디어 중 하나인 벡터 집합의 생성(span)으로 직접 이어집니다. 이 아이디어들은 개별 벡터가 무엇을 할 수 있는지뿐만 아니라, 벡터 그룹이 어떻게 전체 공간을 형성할 수 있는지를 알려줍니다.

#### 선형 결합이란 무엇인가?

선형 결합은 벡터에 스칼라를 곱한 다음 그 결과를 더하여 형성된 모든 벡터입니다.

공식적으로, 벡터 $v_1, v_2, \ldots, v_k$와 스칼라 $a_1, a_2, \ldots, a_k$가 주어졌을 때, 선형 결합은 다음과 같습니다:

$$
a_1 \cdot v_1 + a_2 \cdot v_2 + \cdots + a_k \cdot v_k.
$$

이것은 반복적인 덧셈과 크기 조절에 지나지 않지만, 벡터가 결합하여 새로운 벡터를 생성하는 방법을 설명하기 때문에 강력한 아이디어입니다.

예:
$u = (1, 0)$이고 $v = (0, 1)$일 때, 모든 선형 결합 $a \cdot u + b \cdot v = (a, b)$입니다.
이것은 2D 평면의 모든 점이 이 두 단순한 벡터의 선형 결합으로 표현될 수 있음을 보여줍니다.

#### 기하학적 의미

선형 결합은 방향과 크기를 혼합하는 것에 관한 것입니다. 각 벡터는 "방향성 재료"처럼 작용하고, 스칼라는 각 재료를 얼마나 사용할지 제어합니다.

- 벡터 하나로는: 원점을 통과하는 단일 선 위의 점에만 도달할 수 있습니다.
- 2D에서 평행하지 않은 두 벡터로는: 평면의 모든 점에 도달할 수 있습니다.
- 3D에서 동일 평면상에 있지 않은 세 벡터로는: 3D 공간 전체에 도달할 수 있습니다.

이러한 진행은 선형 결합의 힘이 벡터 자체뿐만 아니라 서로 어떻게 관련되어 있는지에 달려 있음을 보여줍니다.

#### 벡터 집합의 생성(Span)

벡터 집합의 생성(span)은 그들의 모든 가능한 선형 결합의 모음입니다.
그것은 *"이 벡터들이 어떤 공간을 생성하는가?"* 라는 질문에 답합니다.

표기법:

$$
\text{Span}\{v_1, v_2, \ldots, v_k\} =
\{a_1 v_1 + a_2 v_2 + \cdots + a_k v_k \;|\; a_i \in \mathbb{R}\}.
$$

예:

- $\text{Span}\{(1, 0)\}$ = $(1, 0)$의 모든 배수, 즉 $x$축입니다.
- $\text{Span}\{(1, 0), (0, 1)\}$ = $\mathbb{R}^2$ 전체, 즉 전체 평면입니다.
- $\text{Span}\{(1, 2), (2, 4)\}$ = 단지 $(1, 2)$를 통과하는 선, 왜냐하면 두 번째 벡터는 첫 번째 벡터의 배수이기 때문입니다.

따라서 생성(span)은 벡터가 새로운 방향을 추가하는지 아니면 이미 있는 것을 복제하는지에 크게 의존합니다.

#### 평행 벡터와 독립 벡터

벡터가 같거나 반대 방향을 가리키면(하나는 다른 하나의 스칼라 배수), 그들의 생성(span)은 단지 선입니다. 그들은 공간의 새로운 범위를 추가하지 않습니다. 그러나 다른 방향을 가리키면 새로운 차원을 엽니다. 이것은 나중에 탐구할 선형 독립이라는 중요한 아이디어로 이어집니다: 벡터들은 다른 벡터들의 선형 결합이 아닐 때 독립적입니다.

#### 다른 차원에서의 생성(Span) 시각화

- 2D에서:

  - 하나의 벡터는 선을 생성합니다.
  - 두 개의 독립적인 벡터는 전체 평면을 생성합니다.

- 3D에서:

  - 하나의 벡터는 선을 생성합니다.
  - 두 개의 독립적인 벡터는 평면을 생성합니다.
  - 세 개의 독립적인 벡터는 3D 공간 전체를 생성합니다.

- 더 높은 차원에서: 같은 패턴이 계속됩니다. k개의 독립적인 벡터 집합은 더 큰 공간 내에서 k차원 부분 공간을 생성합니다.

#### 일상적인 비유

- 색 혼합: 빨간색과 파란색 물감을 섞어 보라색 음영을 만들 수 있습니다. 노란색을 추가하면 더 넓은 스펙트럼을 커버할 수 있습니다. 마찬가지로 벡터는 결합하여 새로운 벡터를 생성합니다.
- 요리 레시피: 재료(벡터)는 양을 늘리거나 줄일 수 있으며 다른 양으로 결합될 수 있습니다. 생성(span)은 해당 재료로 만들 수 있는 요리의 전체 메뉴입니다.
- 내비게이션 방향: 북쪽과 남쪽으로만 걸을 수 있다면, 당신의 생성(span)은 선입니다. 동서로 걷는 것을 추가하면, 갑자기 도시 격자의 모든 위치에 도달할 수 있습니다.

#### 대수적 속성

- 벡터의 생성(span)은 항상 영 벡터를 포함합니다, 왜냐하면 모든 스칼라를 0으로 선택할 수 있기 때문입니다.
- 생성(span)은 항상 부분 공간이며, 이는 덧셈과 스칼라 곱셈에 대해 닫혀 있음을 의미합니다. 생성(span)에 있는 두 벡터를 더하면 결과는 생성(span)에 남아 있습니다.
- 새로운 독립적인 벡터를 추가하면 생성(span)이 커지지만, 새 벡터가 이전 벡터의 조합일 뿐이라면 그렇지 않습니다.

#### 왜 중요한가

선형 결합과 생성(span)은 선형대수학의 거의 모든 것의 기초입니다:

- 벡터가 독립적인지 종속적인지를 정의합니다.
- 선형 시스템 해결의 기초를 형성합니다(해는 종종 생성(span)으로 설명됩니다).
- 벡터 공간에서 차원이 어떻게 발생하는지 설명합니다.
- 데이터가 몇 개의 중요한 벡터의 생성(span)에 투영되는 주성분 분석과 같은 실용적인 방법을 뒷받침합니다.

요컨대, 생성(span)은 벡터 집합의 "도달 범위"를 알려주고, 선형 결합은 그 도달 범위를 탐색하는 메커니즘입니다.

#### 직접 해보기

1. 벡터 (1, 0)과 (0, 1)을 가지고 세 가지 다른 선형 결합을 쓰고 그려보세요. 어떤 모양을 발견하나요?
2. 벡터 (1, 2)와 (2, 4)를 시도해 보세요. 세 가지 다른 선형 결합을 쓰고 그려보세요. 이전 경우와 다른 점은 무엇인가요?
3. 3D에서 (1, 0, 0)과 (0, 1, 0)을 고려해 보세요. 그들의 생성(span)을 설명하세요. (0, 0, 1)을 추가하면 생성(span)이 어떻게 변하나요?
4. 도전: 벡터 (1, 2, 3)과 (4, 5, 6)을 선택하세요. 그들은 평면을 생성하나요, 아니면 3D 공간 전체를 생성하나요? 어떻게 알 수 있나요?

간단한 예제를 통해 실험함으로써, 생성(span)이라는 아이디어가 벡터 결합의 풍부함이나 한계를 어떻게 포착하는지 명확하게 볼 수 있을 것입니다.

### 5. 길이(노름)와 거리

지금까지 벡터는 방향과 성분을 가진 화살표였습니다. 그것들을 더 의미 있게 비교하기 위해서는, 그것들이 얼마나 긴지, 그리고 얼마나 떨어져 있는지에 대해 이야기할 방법이 필요합니다. 이러한 개념은 벡터의 노름(길이)과 벡터 간의 거리를 통해 공식화됩니다. 이러한 개념들은 성분의 대수와 공간의 기하학을 연결합니다.

#### 벡터의 길이(노름)

벡터의 노름은 그 크기, 즉 화살표가 얼마나 긴지를 측정합니다.
$n$차원 공간의 벡터 $v = (v_1, v_2, \ldots, v_n)$에 대해, 그 노름은 다음과 같이 정의됩니다:

$$
\|v\| = \sqrt{v_1^2 + v_2^2 + \cdots + v_n^2}.
$$

이 공식은 피타고라스 정리에서 직접 나옵니다: 빗변의 길이는 다리의 제곱의 합의 제곱근과 같습니다.
2D에서는 이것이 원점과 한 점 사이의 익숙한 거리 공식입니다.

예:

- $v = (3, 4)$에 대해:
  $$
  \|v\| = \sqrt{3^2 + 4^2} = \sqrt{9 + 16} = 5.
  $$  

- $w = (1, -2, 2)$에 대해:
  $$
  \|w\| = \sqrt{1^2 + (-2)^2 + 2^2} = \sqrt{1 + 4 + 4} = \sqrt{9} = 3.
  $$


#### 단위 벡터

단위 벡터는 길이가 정확히 1인 벡터입니다.
이들은 크기 조절 없이 방향을 포착하기 때문에 중요합니다.
0이 아닌 벡터로부터 단위 벡터를 만들려면, 그 노름으로 나눕니다:

$$
u = \frac{v}{\|v\|}.
$$

예:
$v = (3, 4)$에 대해, 단위 벡터는

$$
u = \left(\tfrac{3}{5}, \tfrac{4}{5}\right).
$$

이것은 $(3, 4)$와 같은 방향을 가리키지만 길이가 1입니다.

단위 벡터는 순수한 방향과 같습니다.
특히 투영, 좌표계 정의, 데이터 정규화에 유용합니다.

#### 벡터 간의 거리

두 벡터 $u$와 $v$ 사이의 거리는 그들의 차이의 길이로 정의됩니다:

$$
\text{dist}(u, v) = \|u - v\|.
$$

예:
$u = (2, 1)$이고 $v = (5, 5)$라고 합시다. 그러면

$$
u - v = (-3, -4).
$$

그 노름은

$$
\sqrt{(-3)^2 + (-4)^2} = \sqrt{9 + 16} = 5.
$$

따라서 거리는 5입니다. 이것은 우리의 직관과 일치합니다: 점 $(2, 1)$과 $(5, 5)$ 사이의 직선 거리입니다.

#### 기하학적 해석

- 노름은 한 점이 원점에서 얼마나 멀리 떨어져 있는지를 알려줍니다.
- 거리는 두 점이 서로 얼마나 멀리 떨어져 있는지를 알려줍니다.

둘 다 같은 공식, 즉 제곱의 합의 제곱근으로 계산되지만, 약간 다른 맥락에서 적용됩니다.

#### 다른 종류의 노름

위의 공식은 가장 일반적인 유클리드 노름(또는 $\ell_2$ 노름)을 정의합니다.
그러나 선형대수학에서는 다른 노름도 유용합니다:

- $\ell_1$ 노름:
  $$
  \|v\|_1 = |v_1| + |v_2| + \cdots + |v_n|
  $$  
  (절대값의 합).

- $\ell_\infty$ 노름:
  $$
  \|v\|_\infty = \max(|v_1|, |v_2|, \ldots, |v_n|)
  $$  
  (가장 큰 성분).

이러한 노름들은 "길이"와 "거리"의 기하학을 바꿉니다. 예를 들어, ℓ₁ 노름에서 단위 원은 다이아몬드 모양이고, ℓ∞ 노름에서는 정사각형처럼 보입니다.

#### 일상적인 비유

- 도시에서 걷는 거리: 거리가 격자 위에 있다면, 유클리드 노름보다 ℓ₁ 노름(절대 차이의 합)이 더 자연스럽습니다.
- 계단 오르기: 유클리드 노름은 대각선 거리를 측정하는 것과 같지만, 한 걸음 한 걸음 걸을 때는 실제로 ℓ₁ 거리를 걷게 될 수 있습니다.
- 데이터의 오차 측정: 다른 노름은 예측과 현실 사이의 "근접성"에 대한 다른 개념을 포착합니다. 유클리드 거리는 큰 오차를 심하게 벌하지만, ℓ₁은 모든 오차를 동등하게 취급합니다.

#### 대수적 속성

노름과 거리는 일관된 측정이 되도록 하는 중요한 속성을 만족합니다:

- 비음수성: $\|v\| \geq 0$, 그리고 $\|v\| = 0$은 $v = 0$일 때만 성립합니다.
- 동차성: $\|c \cdot v\| = |c| \, \|v\|$ (크기 조절은 길이에 예측 가능하게 영향을 미칩니다).
- 삼각 부등식: $\|u + v\| \leq \|u\| + \|v\|$ (직선 경로가 가장 짧습니다).
- 대칭성 (거리에 대해): $\text{dist}(u, v) = \text{dist}(v, u)$.

이러한 속성 때문에 노름과 거리는 수학 전반에 걸쳐 강력한 도구입니다.

#### 왜 중요한가

길이와 거리를 이해하는 것은 더 높은 차원의 기하학으로 가는 첫 걸음입니다. 이러한 개념들은:

- 벡터를 정량적으로 비교할 수 있게 합니다.
- 각도, 직교성, 투영과 같은 개념의 기초를 형성합니다.
- 최적화 문제(예: "가장 가까운 벡터 찾기"는 기계 학습의 핵심)를 뒷받침합니다.
- 어떤 노름을 사용하느냐에 따라 극적으로 변하는 공간의 기하학을 정의합니다.

#### 직접 해보기

1. (6, 8)의 노름을 계산하세요. 그런 다음 노름으로 나누어 단위 벡터를 찾으세요.
2. (1, 1, 1)과 (4, 5, 6) 사이의 거리를 찾으세요.
3. (0, 0)과 (3, 4) 사이의 유클리드 거리와 맨해튼(ℓ₁) 거리를 비교하세요. 도시 격자를 따라 걷는다면 어느 것이 당신의 직관과 더 일치하나요?
4. 도전: 벡터 u = (2, –1, 3)과 v = (–2, 0, 1)에 대해 ‖u – v‖를 계산하세요. 그런 다음 이 거리가 기하학적으로 무엇을 의미하는지 설명하세요.

이러한 예제를 통해 작업함으로써, 노름과 거리가 추상적인 벡터를 일상 생활에서 측정할 수 있는 점과 화살표처럼 실제적으로 느끼게 만드는 방법을 보게 될 것입니다.

### 6. 내적 (대수적 및 기하학적 관점)

내적은 선형대수학에서 가장 근본적인 연산 중 하나입니다. 간단한 공식처럼 보이지만, 각도를 측정하고, 직교성을 감지하고, 한 벡터를 다른 벡터에 투영하고, 물리학에서 에너지나 일을 계산하는 능력을 열어줍니다. 이를 이해하려면 대수적 관점(성분에 대한 공식)과 기하학적 관점(방향을 비교하는 방법)을 모두 보아야 합니다.

#### 대수적 정의

동일한 차원의 두 벡터 $u = (u_1, u_2, \ldots, u_n)$과 $v = (v_1, v_2, \ldots, v_n)$에 대해, 내적은 다음과 같이 정의됩니다:

$$
u \cdot v = u_1 v_1 + u_2 v_2 + \cdots + u_n v_n.
$$

이것은 단순히 해당하는 성분을 곱하고 결과를 합산하는 것입니다.

예:

- $(2, 3) \cdot (4, 5) = (2 \times 4) + (3 \times 5) = 8 + 15 = 23$
- $(1, -2, 3) \cdot (0, 4, -1) = (1 \times 0) + (-2 \times 4) + (3 \times -1) = 0 - 8 - 3 = -11$

내적은 항상 스칼라이며 벡터가 아니라는 점에 유의하세요.

#### 기하학적 정의

내적은 벡터 길이와 각도의 관점에서도 정의될 수 있습니다:

$$
u \cdot v = \|u\| \, \|v\| \cos(\theta),
$$

여기서 $\theta$는 $u$와 $v$ 사이의 각도입니다 ($0^\circ \leq \theta \leq 180^\circ$).

이 공식은 우리에게 다음을 알려줍니다:

- 각도가 예각(90° 미만)이면 $\cos(\theta) > 0$이므로 내적은 양수입니다.
- 각도가 직각(정확히 90°)이면 $\cos(\theta) = 0$이므로 내적은 0입니다.
- 각도가 둔각(90° 초과)이면 $\cos(\theta) < 0$이므로 내적은 음수입니다.

따라서 내적의 부호는 방향적 정렬을 인코딩합니다.

#### 두 정의 연결하기

언뜻 보기에, 곱의 대수적 합과 기하학적 길이-각도 공식은 관련이 없어 보입니다. 그러나 그들은 동등합니다. 그 이유를 보려면, u, v, 그리고 u – v로 형성된 삼각형에 코사인 법칙을 적용하는 것을 고려해 보세요. 양변을 전개하면 두 공식 사이의 동등성으로 직접 이어집니다. 이 이중 해석이 내적을 매우 강력하게 만드는 것입니다: 그것은 계산 규칙이자 기하학적 측정입니다.

#### 직교성

두 벡터는 그들의 내적이 0일 때만 직교(수직)합니다:

$$
u \cdot v = 0 \;\;\Longleftrightarrow\;\; \theta = 90^\circ.
$$

이것은 다이어그램을 그리지 않고도 수직성을 확인하는 대수적 방법을 제공합니다.

예:
$(2, 1) \cdot (-1, 2) = (2 \times -1) + (1 \times 2) = -2 + 2 = 0$,
따라서 벡터들은 직교합니다.

#### 투영

내적은 또한 한 벡터를 다른 벡터에 투영하는 방법을 제공합니다.
$u$를 $v$에 대한 스칼라 투영은 다음과 같습니다:

$$
\text{proj}_{\text{scalar}}(u \text{ onto } v) = \frac{u \cdot v}{\|v\|}.
$$

그러면 벡터 투영은 다음과 같습니다:

$$
\text{proj}_{\text{vector}}(u \text{ onto } v) = \frac{u \cdot v}{\|v\|^2} \, v.
$$

이것은 벡터를 "평행" 및 "수직" 성분으로 분해할 수 있게 해주며, 이는 기하학, 물리학 및 데이터 분석에서 중심적입니다.

#### 예

1. $u = (3, 4)$와 $v = (4, 3)$을 계산합니다.

   - 내적: $(3 \times 4) + (4 \times 3) = 12 + 12 = 24$.
   - 노름: $\|u\| = 5$, $\|v\| = 5$.
   - $\cos(\theta) = \tfrac{24}{5 \times 5} = \tfrac{24}{25} \approx 0.96$, 따라서 $\theta \approx 16^\circ$.
     이 벡터들은 거의 평행합니다.

2. $u = (1, 2, -1)$과 $v = (2, -1, 1)$을 계산합니다.

   - 내적: $(1 \times 2) + (2 \times -1) + (-1 \times 1) = 2 - 2 - 1 = -1$.
   - 노름: $\|u\| = \sqrt{6}$, $\|v\| = \sqrt{6}$.
   - $\cos(\theta) = \tfrac{-1}{\sqrt{6} \times \sqrt{6}} = -\tfrac{1}{6}$, 따라서 $\theta \approx 99.6^\circ$.
     약간 둔각입니다.

#### 물리적 해석

물리학에서 내적은 일을 계산합니다:

$$
\text{일} = \text{힘} \cdot \text{변위}
           = \|\text{힘}\| \, \|\text{변위}\| \cos(\theta).
$$

운동 방향의 힘 성분만이 기여합니다. 상자를 수평으로 움직이려고 하면서 똑바로 아래로 밀면, 내적은 0입니다: 운동 방향으로 일이 수행되지 않습니다.

#### 일상적인 비유

- 팀워크 비유: 두 사람이 차를 밉니다. 거의 같은 방향으로 밀면 내적은 크고 양수입니다(강력한 협력). 직각으로 밀면 내적은 0입니다(서로 돕지 않음). 반대 방향으로 밀면 내적은 음수입니다(서로 반대로 일함).
- 대화 비유: 두 가지 아이디어를 생각해 보세요. 정렬되어 있으면 의미의 "내적"이 높습니다. 관련이 없으면 0입니다. 모순되면 음수입니다.

#### 대수적 속성

- 교환 법칙: $u \cdot v = v \cdot u$
- 분배 법칙: $u \cdot (v + w) = u \cdot v + u \cdot w$
- 스칼라 호환성: $(c \cdot u) \cdot v = c \,(u \cdot v)$
- 비음수성: $v \cdot v = \|v\|^2 \geq 0$

이들은 내적이 일관되게 작동하고 벡터 공간의 구조와 맞물리도록 보장합니다.


#### 왜 중요한가

내적은 대수와 기하학 사이의 첫 번째 다리입니다. 그것은:

- 더 높은 차원에서 각도와 직교성을 정의합니다.
- 최소 제곱, 회귀 및 데이터 피팅의 기초가 되는 투영 및 분해를 강화합니다.
- 물리학에서 에너지, 동력 및 일로 나타납니다.
- 많은 기계 학습 방법의 핵심 역할을 합니다(예: 고차원 공간에서의 유사성 측정).

내적이 없다면, 선형대수학은 숫자와 기하학 및 의미를 연결할 방법이 없을 것입니다.

#### 직접 해보기

1. (2, –1) · (–3, 4)를 계산하세요. 그런 다음 그들 사이의 각도를 찾으세요.
2. (1, 2, 3)과 (2, 4, 6)이 직교하는지 확인하세요. 내적은 무엇을 알려주나요?
3. (3, 1)을 (1, 2)에 투영한 것을 찾으세요. 원래 벡터, 투영, 그리고 수직 성분을 그리세요.
4. 물리학 용어로: 10N의 힘이 운동 방향에 60°로 적용되고 변위가 5m라고 가정합니다. 얼마나 많은 일이 수행되었나요?

이러한 연습은 내적의 이중적인 힘을 드러냅니다: 계산하는 공식으로서, 그리고 해석하는 기하학적 도구로서.

### 7. 벡터 간의 각도와 코사인

내적을 정의했으므로, 이제 벡터 간의 각도를 측정할 준비가 되었습니다. 일상 생활에서 각도는 두 선이나 방향이 어떻게 관련되어 있는지 알려줍니다. 같은 방향을 가리키는지, 수직인지, 아니면 반대인지. 선형대수학에서 내적과 코사인 함수는 2D나 3D뿐만 아니라 모든 차원에서 각도를 정의하는 정확하고 일반화 가능한 방법을 제공합니다. 이 섹션에서는 벡터 각도를 계산, 해석 및 적용하는 방법을 탐구합니다.

#### 벡터 간 각도의 정의

0이 아닌 두 벡터 $u$와 $v$에 대해, 그들 사이의 각도 $\theta$는 다음과 같이 정의됩니다:

$$
\cos(\theta) = \frac{u \cdot v}{\|u\| \, \|v\|}.
$$

이 공식은 내적의 기하학적 정의에서 직접 나옵니다.
재정리하면 다음과 같습니다:

$$
\theta = \arccos\!\left(\frac{u \cdot v}{\|u\| \, \|v\|}\right).
$$

핵심 사항:

- $\theta$는 항상 $0^\circ$와 $180^\circ$ 사이(또는 $0$과 $\pi$ 라디안)입니다.
- 분모는 길이의 곱으로 내적을 정규화하므로, 결과는 무차원이며 항상 $-1$과 $1$ 사이입니다.
- 코사인 값은 정렬을 직접 인코딩합니다: 양수, 0 또는 음수.

#### 코사인 값의 해석

코사인은 방향 관계에 대해 알려줍니다:

- $\cos(\theta) = 1 \;\;\Rightarrow\;\; \theta = 0^\circ$ → 벡터가 정확히 같은 방향을 가리킵니다.
- $\cos(\theta) = 0 \;\;\Rightarrow\;\; \theta = 90^\circ$ → 벡터가 직교(수직)합니다.
- $\cos(\theta) = -1 \;\;\Rightarrow\;\; \theta = 180^\circ$ → 벡터가 정확히 반대 방향을 가리킵니다.
- $\cos(\theta) > 0$ → 예각 → 벡터가 떨어져 있는 것보다 "함께" 더 많이 가리킵니다.
- $\cos(\theta) < 0$ → 둔각 → 벡터가 서로 "반대"로 더 많이 가리킵니다.

따라서 코사인은 기하학적 정렬을 단일 숫자로 압축합니다.

#### 예

1. $u = (1, 0), \; v = (0, 1)$

   - 내적: $1 \times 0 + 0 \times 1 = 0$
   - 노름: $1$과 $1$
   - $\cos(\theta) = 0 \;\Rightarrow\; \theta = 90^\circ$
   예상대로 벡터는 수직입니다.

2. $u = (2, 3), \; v = (4, 6)$

   - 내적: $(2 \times 4) + (3 \times 6) = 8 + 18 = 26$
   - 노름: $\sqrt{2^2 + 3^2} = \sqrt{13}$, 그리고 $\sqrt{4^2 + 6^2} = \sqrt{52} = 2\sqrt{13}$
   - $\cos(\theta) = \tfrac{26}{\sqrt{13} \cdot 2\sqrt{13}} = \tfrac{26}{26} = 1$
   - $\theta = 0^\circ$
   이 벡터들은 배수이므로 완벽하게 정렬됩니다.

3. $u = (1, 1), \; v = (-1, 1)$

   - 내적: $(1 \times -1) + (1 \times 1) = -1 + 1 = 0$
   - $\cos(\theta) = 0 \;\Rightarrow\; \theta = 90^\circ$
   벡터는 수직이며 정사각형의 대각선을 형성합니다.

#### 더 높은 차원에서의 각도

이 공식의 아름다움은 모든 차원에서 작동한다는 것입니다.
$\mathbb{R}^{100}$ 이상에서도, 우리는 두 벡터 사이의 각도를 그들의 내적과 노름만 사용하여 정의할 수 있습니다.

고차원에서는 기하학을 직접 시각화할 수 없지만, 코사인 공식은 여전히 두 방향이 얼마나 정렬되어 있는지를 포착합니다:

$$
\cos(\theta) = \frac{u \cdot v}{\|u\| \, \|v\|}.
$$

이것은 데이터가 종종 매우 고차원 공간에 사는 기계 학습에서 중요합니다.

#### 코사인 유사도

두 벡터 사이의 각도의 코사인은 종종 코사인 유사도라고 불립니다. 데이터 분석 및 기계 학습에서 두 데이터 벡터가 크기에 관계없이 얼마나 유사한지를 측정하는 데 널리 사용됩니다.

- 텍스트 마이닝에서 문서는 단어 빈도 벡터로 변환됩니다. 코사인 유사도는 두 문서가 길이에 관계없이 주제 면에서 얼마나 "가까운지"를 측정합니다.
- 추천 시스템에서 코사인 유사도는 사용자 선호도 벡터를 비교하여 유사한 사용자나 항목을 제안합니다.

이것은 기하학적 개념이 순수 수학을 훨씬 뛰어넘어 확장되는 방법을 보여줍니다.

#### 직교성 재검토

각도 공식은 직교성의 특별한 역할을 강화합니다.
$\cos(\theta) = 0$이면, $u \cdot v = 0$입니다.

이것은 내적이 길이뿐만 아니라 수직성에 대한 직접적인 테스트 역할도 한다는 것을 의미합니다.
이 대수적 지름길은 기하학적 직각을 수동으로 확인하는 것보다 훨씬 쉽습니다.

#### 각도와 투영

각도는 투영과 밀접하게 관련되어 있습니다.
$u$를 $v$에 투영한 길이는 $\|u\|\cos(\theta)$입니다.

각도가 작으면 투영이 큽니다 — $u$의 대부분이 $v$의 방향에 놓여 있습니다.
각도가 $90^\circ$에 가까우면 투영은 0으로 줄어듭니다.

따라서 코사인은 방향 사이의 스케일링 팩터 역할을 합니다.

#### 일상적인 비유

- 팀워크 비유: 두 사람이 무거운 물체를 밀 때, 그들의 결합된 노력의 효과는 각도에 따라 달라집니다.
  거의 같은 방향으로 밀면(작은 $\theta$), 효율적으로 협력합니다.
  직각으로 밀면($\theta = 90^\circ$), 노력을 낭비합니다.
  서로 반대로 밀면($\theta \approx 180^\circ$), 서로 상쇄됩니다.

- 대화 비유: 두 사람의 의견이 일치하면($\cos \theta \approx 1$), 강력하게 동의합니다.
  직교하면($\cos \theta = 0$), 관련이 없습니다.
  서로 반대하면($\cos \theta \approx -1$), 근본적으로 동의하지 않습니다.

- 내비게이션 비유: 두 도로가 작은 각도로 만나면 방향이 비슷합니다.
  수직으로 교차하면 방향이 독립적입니다.

#### 왜 중요한가

벡터 간의 각도는 다음을 제공합니다:

- 2D/3D를 넘어 기하학을 일반화하는 방법.
- 고차원 데이터의 유사성 측정.
- 직교성, 투영 및 공간 분해의 기초.
- 최적화 도구: 예를 들어, 경사 하강법에서 경사도와 스텝 방향 사이의 각도는 오차를 얼마나 효과적으로 줄이는지를 결정합니다.

각도를 측정하는 능력이 없다면, 대수적 조작을 기하학적 직관이나 실제 적용과 연결할 수 없을 것입니다.

#### 직접 해보기

1. (2, 1)과 (1, –1) 사이의 각도를 계산하세요. 결과를 해석하세요.
2. 3D에서 60° 각도를 이루는 두 벡터를 찾으세요. 코사인 공식을 사용하여 확인하세요.
3. 기계 학습 모델에서 "고양이"와 "개"에 대한 단어 벡터를 고려해 보세요. 유클리드 거리보다 코사인 유사도가 유사성을 측정하는 데 더 나은 척도인 이유는 무엇일까요?
4. 도전: $\mathbb{R}^3$에서 (1, 2, 3)과 (3, 2, 1) 모두에 직교하는 벡터를 찾으세요. 각 벡터와 어떤 각도를 이루나요?

이러한 문제를 통해 실험함으로써, 각도가 선형대수학에서 대수 공식과 기하학적 의미 사이의 빠진 고리를 어떻게 제공하는지 보게 될 것입니다.

### 8. 투영과 분해

이전 섹션에서는 내적이 정렬을 측정하는 방법과 코사인 공식이 벡터 간의 각도를 제공하는 방법을 보았습니다. 다음 자연스러운 단계는 이러한 도구를 사용하여 한 벡터를 다른 벡터에 투영하는 것입니다. 투영은 한 벡터를 다른 벡터의 방향으로 "그림자"를 드리우는 방법으로, 벡터를 의미 있는 부분으로 분할합니다: 주어진 방향을 따르는 부분과 그에 수직인 부분. 이것이 분해의 본질이며, 선형대수학, 기하학, 물리학 및 데이터 과학의 모든 곳에 있습니다.

#### 스칼라 투영

벡터 $u$를 벡터 $v$에 대한 스칼라 투영은 $u$가 $v$의 방향으로 얼마나 놓여 있는지를 측정합니다. 다음과 같이 주어집니다:

$$
\text{proj}_{\text{scalar}}(u \text{ onto } v) = \frac{u \cdot v}{\|v\|}.
$$

- 이 값이 양수이면, $u$는 $v$와 같은 방향을 가리키는 성분을 가집니다.
- 음수이면, $u$는 부분적으로 반대 방향을 가리킵니다.
- 0이면, $u$는 $v$에 완전히 수직입니다.

예:
$u = (3, 4)$, $v = (1, 0)$.
내적: $(3 \times 1 + 4 \times 0) = 3$.
$\|v\| = 1$.
따라서 스칼라 투영은 $3$입니다. 이것은 $u$가 $x$축에 길이 $3$의 "그림자"를 가지고 있음을 알려줍니다.

#### 벡터 투영

벡터 투영은 이 스칼라 양에 해당하는 $v$ 방향의 실제 화살표를 제공합니다:

$$
\text{proj}_{\text{vector}}(u \text{ onto } v) = \frac{u \cdot v}{\|v\|^2} \, v.
$$

이 공식은 $v$를 단위 벡터로 정규화한 다음, 스칼라 투영으로 크기를 조절합니다.
결과는 $v$를 따라 놓인 새로운 벡터이며, $u$의 "평행" 부분을 정확하게 포착합니다.

예:
$u = (3, 4)$, $v = (1, 2)$

- 내적: $3 \times 1 + 4 \times 2 = 3 + 8 = 11$
- $v$의 노름 제곱: $(1^2 + 2^2) = 5$
- 계수: $11 / 5 = 2.2$
- 투영 벡터: $2.2 \cdot (1, 2) = (2.2, 4.4)$

따라서 $(3, 4)$의 $(1, 2)$ 방향 부분은 $(2.2, 4.4)$입니다.


#### 수직 성분

투영을 얻으면, 단순히 빼서 수직 성분(종종 거부(rejection)라고 함)을 찾을 수 있습니다:

$$
u_{\perp} = u - \text{proj}_{\text{vector}}(u \text{ onto } v).
$$

이것은 $v$에 완전히 직교하는 $u$의 부분을 제공합니다.

계속된 예:
$u_{\perp} = (3, 4) - (2.2, 4.4) = (0.8, -0.4)$

확인:
$(0.8, -0.4) \cdot (1, 2) = 0.8 \times 1 + (-0.4) \times 2 = 0.8 - 0.8 = 0$.
실제로 직교합니다.

#### 기하학적 그림

투영은 한 벡터에서 다른 벡터로 수선을 내리는 것과 같습니다. v에 수직으로 빛을 비춘다고 상상해 보세요: v가 생성하는 선에 대한 u의 그림자가 투영입니다. 이 시각화는 왜 투영이 벡터를 자연스럽게 두 조각으로 나누는지 설명합니다:

- 평행 부분: v의 선을 따라.
- 수직 부분: v에 직교하며, 직각을 형성합니다.

함께, 이 두 부분은 원래 벡터를 정확하게 재구성합니다.

#### 벡터의 분해

모든 벡터 $u$는 다른 벡터 $v$에 대해 두 부분으로 분해될 수 있습니다:

$$
u = \text{proj}_{\text{vector}}(u \text{ onto } v) + \big(u - \text{proj}_{\text{vector}}(u \text{ onto } v)\big).
$$

이 분해는 독특하고 기하학적으로 의미가 있습니다.
이는 부분 공간으로 일반화됩니다: 우리는 전체 평면이나 더 높은 차원의 생성(span)에 투영하여 벡터를 "부분 공간 내" 부분과 "부분 공간에 수직인" 부분으로 분할할 수 있습니다.


#### 응용

1. 물리학 (일과 힘):
   일은 힘을 변위에 투영한 것입니다. 운동 방향의 힘 부분만이 기여합니다.
   예: 썰매를 부분적으로 옆으로 미는 것은 노력을 낭비합니다 - 옆으로 미는 성분은 0으로 투영됩니다.

2. 기하학 및 공학:
   투영은 CAD(컴퓨터 지원 설계)에서 3D 객체를 청사진이나 그림자처럼 2D 표면에 평평하게 만드는 데 사용됩니다.

3. 컴퓨터 그래픽스:
   3D 장면을 2D 화면에 렌더링하는 것은 근본적으로 투영 과정입니다.

4. 데이터 과학:
   고차원 데이터를 더 낮은 차원의 부분 공간(예: PCA의 처음 두 주성분)에 투영하면 가능한 한 많은 정보를 보존하면서 패턴을 볼 수 있습니다.

5. 신호 처리:
   사인파와 코사인파에 대한 투영으로의 분해는 오디오, 이미지 및 비디오 압축을 강화하는 푸리에 분석의 기초를 형성합니다.

#### 일상적인 비유

- 손전등 그림자: 손전등을 비추어 막대기가 바닥에 그림자를 드리우게 한다고 상상해 보세요. 그림자는 막대기를 바닥 평면에 투영한 것입니다.
- 팀 노력: 두 사람이 상자를 당길 때, 한 사람의 방향으로의 효과적인 진행은 다른 사람의 당김을 그 방향으로 투영한 것입니다.
- 성적 비유: 당신의 성과가 노력과 산만함의 혼합이라면, "노력"에 대한 투영은 당신의 작업 중 얼마나 많은 부분이 실제 진행과 일치하는지를 보여줍니다.

#### 대수적 속성

- 투영은 선형입니다: proj(u + w) = proj(u) + proj(w).
- 수직 부분은 항상 투영 방향에 직교합니다.
- 분해는 독특합니다: 다른 평행 및 수직 벡터 쌍은 u를 재구성하지 않습니다.
- 단위 벡터 v̂에 대한 투영 연산자는 proj(u) = (v̂ v̂ᵀ)u를 만족하며, 이는 투영이 행렬 형태로 어떻게 표현될 수 있는지를 보여줍니다.

#### 왜 중요한가

투영은 단지 기하학적 트릭이 아닙니다. 그것은 많은 고급 주제의 핵심입니다:

- 최소 제곱 회귀는 데이터 벡터를 예측 변수 벡터의 생성(span)에 투영하는 것을 찾는 것입니다.
- 그람-슈미트 및 QR 인수분해와 같은 직교 분해는 직교 기저를 구축하기 위해 투영에 의존합니다.
- 최적화 방법은 종종 추측을 실행 가능한 집합으로 다시 투영하는 것을 포함합니다.
- 기계 학습은 차원을 줄이고, 벡터를 비교하고, 특징을 정렬하기 위해 지속적으로 투영을 사용합니다.

투영이 없다면, 우리는 방향에 따른 영향을 깔끔하게 분리하거나 구조화된 방식으로 복잡성을 줄일 수 없을 것입니다.

#### 직접 해보기

1. (2, 3)을 (1, 0)에 투영하세요. 수직 성분은 어떻게 생겼나요?
2. (3, 1)을 (2, 2)에 투영하세요. 수직 부분이 직교하는지 확인하세요.
3. (5, 5, 0)을 (1, 0, 0)에 대해 평행 및 수직 부분으로 분해하세요.
4. 도전: (1, 2)에 투영하는 투영 행렬을 작성하세요. (3, 4)에 적용하세요. 공식과 일치하나요?

이러한 연습을 통해, 투영이 연산 이상의 것임을 보게 될 것입니다. 그것은 우리가 벡터와 공간을 분해하고, 해석하고, 단순화하는 렌즈입니다.

### 9. 코시-슈바르츠 및 삼각 부등식

선형대수학은 벡터와의 연산에 관한 것뿐만 아니라, 그들 사이의 근본적인 관계를 이해하는 것도 포함합니다. 이와 관련하여 가장 중요한 두 가지 결과는 코시-슈바르츠 부등식과 삼각 부등식입니다. 이들은 길이, 각도 및 내적에 대한 정확한 경계를 설정하기 때문에 벡터 공간의 초석입니다. 그것들이 없다면, 선형대수학의 기하학은 무너질 것입니다.

#### 코시-슈바르츠 부등식

$\mathbb{R}^n$의 임의의 두 벡터 $u$와 $v$에 대해, 코시-슈바르츠 부등식은 다음과 같이 말합니다:

$$
|u \cdot v| \leq \|u\| \, \|v\|.
$$

이것은 두 벡터의 내적의 절대값이 항상 그들의 길이의 곱보다 작거나 같다는 것을 의미합니다.

등호는 u와 v가 선형적으로 종속될 때(즉, 하나가 다른 하나의 스칼라 배수일 때)만 성립합니다.

##### 왜 그것이 사실인가

내적에 대한 기하학적 공식을 상기해 봅시다:

$$
u \cdot v = \|u\| \, \|v\| \cos(\theta).
$$

$-1 \leq \cos(\theta) \leq 1$이므로, 내적의 크기는 $\|u\| \, \|v\|$를 초과할 수 없습니다.
이것이 바로 부등식입니다.

##### 예

$u = (3, 4)$이고 $v = (-4, 3)$이라고 합시다.

- 내적: $(3 \times -4) + (4 \times 3) = -12 + 12 = 0$
- 노름: $\|u\| = 5$, $\|v\| = 5$
- 노름의 곱: $25$
- $|u \cdot v| = 0 \leq 25$, 이는 부등식을 만족합니다.

그들은 배수가 아니기 때문에 등호가 성립하지 않습니다 - 그들은 수직입니다.

##### 직관

부등식은 두 벡터가 그들의 크기의 곱보다 더 강하게 "겹칠" 수 없다는 것을 알려줍니다. 완벽하게 정렬되면 겹침이 최대입니다(등호). 수직이면 겹침이 0입니다.

"한 벡터의 다른 벡터에 대한 그림자는 벡터 자체보다 길 수 없다"고 생각할 수 있습니다.

#### 삼각 부등식

임의의 벡터 $u$와 $v$에 대해, 삼각 부등식은 다음과 같이 말합니다:

$$
\|u + v\| \leq \|u\| + \|v\|.
$$

이것은 삼각형에서 임의의 한 변은 다른 두 변의 합보다 길지 않다는 기하학적 사실을 반영합니다.

##### 예

$u = (1, 2)$이고 $v = (3, 4)$라고 합시다.

- $\|u + v\| = \|(4, 6)\| = \sqrt{16 + 36} = \sqrt{52} \approx 7.21$
- $\|u\| + \|v\| = \sqrt{5} + 5 \approx 2.24 + 5 = 7.24$

실제로, $7.21 \leq 7.24$이며, 이 경우 매우 가깝습니다.

##### 등호의 경우

삼각 부등식은 벡터가 정확히 같은 방향을 가리킬 때(또는 음이 아닌 계수를 가진 스칼라 배수일 때) 등호가 됩니다. 예를 들어, (1, 1)과 (2, 2)는 등호를 생성하는데, 왜냐하면 그들을 더하면 길이가 그들의 길이의 합과 같은 벡터가 되기 때문입니다.

#### 일상적인 비유

- 코시-슈바르츠: 여러 과목에 걸친 두 사람의 공부 습관을 비교한다고 상상해 보세요. 각 벡터는 각 과목에 보낸 시간을 나타냅니다. 내적은 그들의 습관이 얼마나 "일치"하는지를 나타냅니다. 코시-슈바르츠는 정렬이 개별 노력의 곱을 초과할 수 없다고 말합니다.
- 삼각 부등식: 도시에서 걷는 것을 생각해 보세요. 집에서 가게로, 그리고 가게에서 공원으로 가고 싶다면, 총 거리는 집에서 공원으로 바로 가는 것보다 적어도 깁니다. 직접적인 경로보다 긴 지름길은 없습니다.

#### 확장

- 이러한 부등식은 ℝⁿ뿐만 아니라 모든 내적 공간에서 성립합니다. 이것은 함수, 시퀀스 및 더 추상적인 수학적 객체에도 적용된다는 것을 의미합니다.
- 힐베르트 공간(무한 차원 일반화)에서도 마찬가지로 필수적입니다.

#### 왜 중요한가

1. 그들은 내적과 노름이 잘 작동하고 기하학적으로 의미가 있음을 보장합니다.
2. 그들은 노름이 거리 측정의 요구 사항(비음수성, 대칭성 및 삼각 부등식)을 만족함을 보장합니다.
3. 그들은 투영, 직교성 및 최소 제곱 방법의 타당성을 뒷받침합니다.
4. 그들은 알고리즘의 수렴, 오차 한계 및 수치 선형대수학의 안정성을 증명하는 데 필수적입니다.

이러한 부등식이 없다면, 우리는 벡터 공간의 기하학이 일관되게 작동한다고 믿을 수 없을 것입니다.

#### 직접 해보기

1. (2, –1, 3)과 (–1, 4, 0)에 대해 코시-슈바르츠를 확인하세요. 양변을 계산하세요.
2. (–3, 4)와 (5, –12)에 대해 삼각 부등식을 시도해 보세요. 등호가 성립하나요?
3. 코시-슈바르츠가 등호인 두 벡터를 찾으세요. 이유를 설명하세요.
4. 도전: 내적에 의존하지 않고 피타고라스 정리와 대수만 사용하여 $\mathbb{R}^2$에서 삼각 부등식을 증명하세요.

이러한 문제를 통해 작업함으로써, 이러한 부등식이 추상적인 호기심이 아니라 선형대수학 기하학의 구조적 접착제임을 알게 될 것입니다.

### 10. $\mathbb{R}^2$와 $\mathbb{R}^3$의 정규직교 집합

지금까지 우리는 벡터, 그들의 길이, 각도, 그리고 하나를 다른 하나에 투영하는 방법에 대해 논의했습니다. 이러한 아이디어의 자연스러운 정점은 정규직교 집합의 개념입니다. 이들은 직교(서로 수직)일 뿐만 아니라 정규화된(각각 길이가 1) 벡터들의 모음입니다. 정규직교 집합은 선형대수학에서 가장 깨끗하고 효율적인 좌표계를 형성합니다. 그들은 단위 길이로 완벽하게 보정된 직각의 자를 갖는 것과 수학적으로 동일합니다.

#### 직교 및 정규화

"정규직교"라는 용어를 두 부분으로 나누어 봅시다:

- 직교: 두 벡터 $u$와 $v$는 $u \cdot v = 0$일 때 직교합니다.
  $\mathbb{R}^2$에서는 이것이 벡터가 직각으로 만난다는 것을 의미합니다.
  $\mathbb{R}^3$에서는 수직 방향을 형성한다는 것을 의미합니다.

- 정규화: 벡터 $v$는 길이가 $1$일 때, 즉 $\|v\| = 1$일 때 정규화됩니다.
  이러한 벡터를 단위 벡터라고 합니다.

두 조건을 결합하면, 서로 수직이고 단위 길이를 갖는 정규직교 벡터를 얻습니다.

#### $\mathbb{R}^2$의 정규직교 집합

2차원에서 정규직교 집합은 일반적으로 두 개의 벡터로 구성됩니다.
전형적인 예는 다음과 같습니다:

$e_1 = (1, 0), \quad e_2 = (0, 1)$

- 내적: $e_1 \cdot e_2 = (1 \times 0 + 0 \times 1) = 0 \;\;\Rightarrow\;\;$ 직교
- 길이: $\|e_1\| = 1$, $\|e_2\| = 1 \;\;\Rightarrow\;\;$ 정규화

따라서 $\{e_1, e_2\}$는 정규직교 집합입니다.
사실, 이것은 $\mathbb{R}^2$의 표준 기저입니다.
모든 벡터 $(x, y)$는 $x e_1 + y e_2$로 쓸 수 있습니다.
이것이 가장 간단한 좌표계입니다.

#### $\mathbb{R}^3$의 정규직교 집합

3차원에서 정규직교 집합은 보통 세 개의 벡터를 가집니다.
표준 기저는 다음과 같습니다:

$e_1 = (1, 0, 0), \quad e_2 = (0, 1, 0), \quad e_3 = (0, 0, 1)$

- 각 쌍의 내적은 0이므로 직교합니다.
- 각각 길이가 $1$이므로 정규화됩니다.
- 함께, 그들은 $\mathbb{R}^3$ 전체를 생성합니다.

기하학적으로, 그들은 3D 공간의 $x$-, $y$-, $z$-축에 해당합니다.
모든 벡터 $(x, y, z)$는 선형 결합 $x e_1 + y e_2 + z e_3$로 쓸 수 있습니다.

#### 표준 기저를 넘어서

표준 기저만이 유일한 정규직교 집합은 아닙니다. 예를 들어:

$u = \left(\tfrac{1}{\sqrt{2}}, \tfrac{1}{\sqrt{2}}\right), \quad 
 v = \left(-\tfrac{1}{\sqrt{2}}, \tfrac{1}{\sqrt{2}}\right)$

- 내적: $(\tfrac{1}{\sqrt{2}})(-\tfrac{1}{\sqrt{2}}) + (\tfrac{1}{\sqrt{2}})(\tfrac{1}{\sqrt{2}}) = -\tfrac{1}{2} + \tfrac{1}{2} = 0$
- 길이: $\sqrt{(\tfrac{1}{\sqrt{2}})^2 + (\tfrac{1}{\sqrt{2}})^2} = \sqrt{\tfrac{1}{2} + \tfrac{1}{2}} = 1$

따라서 $\{u, v\}$도 $\mathbb{R}^2$에서 정규직교입니다.
이 벡터들은 표준 축에 대해 $45^\circ$ 회전되어 있습니다.

마찬가지로, $\mathbb{R}^3$에서도 수직성과 단위 길이 조건이 유지되는 한 회전된 정규직교 집합(예: 대각선을 따른 단위 벡터)을 구성할 수 있습니다.

#### 정규직교 집합의 속성

1. 단순화된 좌표: $\{v_1, \ldots, v_k\}$가 정규직교 집합이면, 그들의 생성(span)에 있는 모든 벡터 $u$에 대해 계수를 쉽게 계산할 수 있습니다:
   $$
   c_i = u \cdot v_i
   $$
   이것은 연립 방정식을 푸는 것보다 훨씬 간단합니다.

2. 일반화된 피타고라스 정리: 벡터가 정규직교이면, 그들의 합의 제곱 길이는 계수의 제곱의 합입니다.
   예를 들어, $u = a v_1 + b v_2$이면,
   $$
   \|u\|^2 = a^2 + b^2
   $$

3. 쉬운 투영: 정규직교 집합에 투영하는 것은 간단합니다 — 그냥 내적을 취하면 됩니다.

4. 행렬이 좋아짐: 벡터가 행렬의 열을 형성할 때, 정규직교성은 그 행렬을 직교 행렬로 만들며, 이는 특별한 속성을 가집니다: 전치가 역행렬과 같고, 길이와 각도를 보존합니다.

#### $\mathbb{R}^2$와 $\mathbb{R}^3$에서의 중요성

- 기하학에서 정규직교 기저는 좌표축에 해당합니다.
- 물리학에서 그들은 독립적인 운동 또는 힘의 방향을 나타냅니다.
- 컴퓨터 그래픽스에서 정규직교 집합은 카메라 축과 객체 회전을 정의합니다.
- 공학에서 그들은 응력, 변형 및 회전 분석을 단순화합니다.

$\mathbb{R}^2$와 $\mathbb{R}^3$이 비교적 단순하더라도, 동일한 아이디어는 시각화가 불가능하지만 대수가 동일한 더 높은 차원으로 자연스럽게 확장됩니다.

#### 일상적인 비유

- 도시 탐색: 각각 미터로 표시된 두 개의 수직 거리를 상상해 보세요. 동쪽으로 3 단위, 북쪽으로 4 단위 걸으면 좌표 (3, 4)가 됩니다. 이것이 정규직교 시스템입니다.
- 가구 조립: 한 부분을 "똑바로 위로", 다른 부분을 "똑바로 가로질러" 정렬하라는 지시를 받으면, 정규직교 방향으로 작업하는 것입니다.
- 디지털 화면: 컴퓨터 모니터는 수평 및 수직으로 정렬된 픽셀 격자를 사용하며, 이는 정규직교성의 실용적인 실현입니다.

#### 정규직교 집합이 중요한 이유

정규직교성은 선형대수학에서 기저를 구축하기 위한 황금 표준입니다:

- 계산을 빠르고 간단하게 만듭니다.
- 계산에서 수치적 안정성을 보장합니다(알고리즘 및 시뮬레이션에서 중요).
- QR 인수분해, 특이값 분해(SVD) 및 스펙트럼 정리와 같은 주요 분해를 뒷받침합니다.
- 공간을 생각하는 가장 깨끗한 방법을 제공합니다: 직교하고 독립적인 방향을 단위 길이로 조정한 것입니다.

가능할 때마다 수학자와 엔지니어는 임의의 기저보다 정규직교 기저를 선호합니다.

#### 직접 해보기

1. (3/5, 4/5)와 (–4/5, 3/5)가 $\mathbb{R}^2$에서 정규직교 집합을 형성하는지 확인하세요.
2. 표준 기저가 아닌 $\mathbb{R}^3$의 세 개의 정규직교 벡터를 구성하세요. 힌트: (1/√2, 1/√2, 0)에서 시작하여 수직을 만드세요.
3. u = (2, 1)에 대해, 정규직교 집합 {(1/√2, 1/√2), (–1/√2, 1/√2)}에 대한 좌표를 계산하세요.
4. 도전: {v₁, …, vₖ}가 정규직교이면, 이들을 열로 갖는 행렬이 직교 행렬임을 증명하세요, 즉, QᵀQ = I.

이러한 연습을 통해, 정규직교 집합이 투영에서 분해에 이르기까지 선형대수학의 모든 측면을 더 간단하고, 깨끗하고, 강력하게 만드는 방법을 보게 될 것입니다.

#### 맺음말
```
길이, 각도가 드러나고,
투영은 숨겨진 선을 그리며,
명료함이 형태를 갖춘다.
```

## 제2장. 행렬과 기본 연산

#### 서시
```
행과 열이 만나고,
조용한 규칙의 짜인 격자,
질서의 기계들.
```

### 11. 표로서의 행렬과 기계로서의 행렬

우리 여정의 다음 단계는 벡터에서 행렬로 이동하는 것입니다. 행렬은 단지 숫자의 직사각형 배열처럼 보일 수 있지만, 선형대수학에서는 두 가지 뚜렷하고 똑같이 중요한 역할을 합니다:

1. 데이터, 계수 또는 기하학적 패턴을 간결한 형태로 저장하는 숫자 표로서.
2. 벡터를 다른 벡터로 변환하여 선형 변환의 본질을 포착하는 기계로서.

두 관점 모두 유효하며, 그들 사이를 전환하는 법을 배우는 것은 직관을 구축하는 데 중요합니다.

#### 표로서의 행렬

가장 기본적인 수준에서, 행렬은 행과 열로 배열된 숫자의 격자입니다.

- $2 \times 2$ 행렬은 2개의 행과 2개의 열을 가집니다:

  $$
  A = \begin{bmatrix} 
  a_{11} & a_{12} \\ 
  a_{21} & a_{22} 
  \end{bmatrix}
  $$

- $3 \times 2$ 행렬은 3개의 행과 2개의 열을 가집니다:

  $$
  B = \begin{bmatrix} 
  b_{11} & b_{12} \\ 
  b_{21} & b_{22} \\ 
  b_{31} & b_{32} 
  \end{bmatrix}
  $$

각 항목 $a_{ij}$ 또는 $b_{ij}$는 i번째 행과 j번째 열의 숫자를 알려줍니다. 행렬의 행은 제약 조건, 방정식 또는 관측치를 나타낼 수 있으며, 열은 특징, 변수 또는 방향을 나타낼 수 있습니다.

이런 의미에서 행렬은 정보를 효율적으로 구성하는 데이터 컨테이너입니다. 이것이 행렬이 스프레드시트, 통계, 컴퓨터 그래픽스 및 과학 컴퓨팅에 나타나는 이유입니다.

#### 기계로서의 행렬

행렬의 더 깊은 관점은 벡터에서 벡터로의 함수로서입니다. x가 열벡터이면, A·x를 곱하면 새로운 벡터가 생성됩니다.

예를 들어:

$$
A = \begin{bmatrix} 
2 & 0 \\ 
1 & 3 
\end{bmatrix}, \quad
\mathbf{x} = \begin{bmatrix} 
4 \\ 
5 
\end{bmatrix}.
$$

곱하기:

$$
A\mathbf{x} = \begin{bmatrix} 
2×4 + 0×5 \\ 
1×4 + 3×5 
\end{bmatrix} 
= \begin{bmatrix} 
8 \\ 
19 
\end{bmatrix}.
$$

여기서 행렬은 입력 (4, 5)를 받아 출력 (8, 19)을 내는 기계 역할을 합니다. "기계 규칙"은 A의 행에 인코딩되어 있습니다.

#### 행렬 곱셈의 열 관점

그것을 보는 또 다른 방법: A·x를 곱하는 것은 A의 열의 선형 결합을 취하는 것과 같습니다.

만약

$$
A = \begin{bmatrix} 
a_1 & a_2 
\end{bmatrix}, \quad \mathbf{x} = \begin{bmatrix} 
x_1 \\ 
x_2 
\end{bmatrix},
$$

이면:

$$
A\mathbf{x} = x_1 a_1 + x_2 a_2.
$$

따라서 벡터 x는 기계에게 각 열을 "얼마나" 섞을지 알려줍니다. 이 열 관점은 중요합니다 - 그것은 행렬을 우리가 이전에 본 생성(span), 차원 및 기저 아이디어와 연결합니다.

#### 표와 기계의 이중성

- 표로서, 행렬은 정적인 객체입니다: 행과 열에 쓰인 숫자.
- 기계로서, 같은 숫자는 벡터를 변환하기 위한 지침이 됩니다.

이 이중성은 단지 개념적인 것이 아닙니다 - 그것은 선형대수학이 왜 그렇게 강력한지를 이해하는 열쇠입니다. 일단 표로 저장된 데이터셋은 변환으로 해석될 수 있습니다. 마찬가지로, 일단 이해된 변환은 표로 인코딩될 수 있습니다.

#### 실제 예

1. 물리학: 응력-변형 행렬은 계수의 표입니다. 그러나 그것은 또한 적용된 힘을 변형으로 변환하는 기계 역할을 합니다.
2. 컴퓨터 그래픽스: 2D 회전 행렬은 벡터를 회전시키는 기계이지만, 간단한 2×2 표에 저장될 수 있습니다.
3. 경제학: 투입-산출 모델은 생산 계수의 표로서 행렬을 사용합니다. 그것들을 수요 벡터에 적용하면 자원 요구 사항으로 변환됩니다.

#### 기하학적 직관

모든 2×2 또는 3×3 행렬은 평면이나 공간에서 어떤 선형 변환에 해당합니다. 예:

- 크기 조절: $\begin{bmatrix} 2 & 0 \\ 0 & 2 \end{bmatrix}$는 길이를 두 배로 늘립니다.
- 반사: $\begin{bmatrix} 1 & 0 \\ 0 & -1 \end{bmatrix}$는 x축에 대해 뒤집습니다.
- 회전: $\begin{bmatrix} \cos θ & -\sin θ \\ \sin θ & \cos θ \end{bmatrix}$는 벡터를 θ만큼 회전시킵니다.

이것들은 단지 숫자의 표가 아닙니다 - 그것들은 정확하고 재사용 가능한 기계입니다.

#### 왜 이것이 중요한가

이 섹션은 모든 행렬 이론의 무대를 설정합니다:

- 행렬을 표로 생각하는 것은 데이터 해석 및 구성에 도움이 됩니다.
- 행렬을 기계로 생각하는 것은 선형 변환, 고유값 및 분해를 이해하는 데 도움이 됩니다.
- 가장 중요한 것은, 두 관점 사이를 전환하는 법을 배우는 것이 선형대수학을 구체적이면서도 추상적으로 만들어 계산과 기하학을 연결한다는 것입니다.

#### 직접 해보기

1. 2×3 행렬을 쓰고 행과 열을 식별하세요. 실제 데이터셋에서 무엇을 나타낼 수 있을까요?
2. $\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}$에 $\begin{bmatrix} 2 \\ –1 \end{bmatrix}$을 곱하세요. 행과 열 관점을 모두 사용하여 결과를 해석하세요.
3. x축을 따라 벡터를 2배로 크기 조절하고 y축에 대해 반사하는 행렬을 구성하세요. (1, 1)에 대해 테스트하세요.
4. 도전: 동일한 3×3 회전 행렬이 어떻게 코사인/사인의 데이터 표와 입력 벡터를 변환하는 기계로 볼 수 있는지 보여주세요.

두 관점을 모두 마스터함으로써, 행렬을 단지 숫자가 아니라 변환을 인코딩하고 실행하는 동적 객체로 보게 될 것입니다.

### 12. 행렬 모양, 인덱싱 및 블록 보기

행렬은 다양한 모양과 크기로 제공되며, 항목을 레이블링하는 방식이 중요합니다. 이 섹션은 행렬을 신중하게 읽고 쓰는 방법, 행과 열로 작업하는 방법, 그리고 문제를 단순화하기 위해 블록 구조를 사용하는 방법에 관한 것입니다. 이러한 간단해 보이는 아이디어는 우리가 큰 시스템을 정밀하고 효율적으로 조작할 수 있게 해주는 것입니다.

#### 행렬의 모양

행렬의 모양은 행과 열의 수로 주어집니다:

- m×n 행렬은 m개의 행과 n개의 열을 가집니다.
- 행은 수평으로, 열은 수직으로 실행됩니다.
- 정사각 행렬은 m = n이고, 직사각 행렬은 m ≠ n입니다.

예:

- 2×3 행렬:

  $$
  \begin{bmatrix} 
  1 & 2 & 3 \\ 
  4 & 5 & 6 
  \end{bmatrix}
  $$
- 3×2 행렬:

  $$
  \begin{bmatrix} 
  7 & 8 \\ 
  9 & 10 \\ 
  11 & 12 
  \end{bmatrix}
  $$

모양은 곱셈과 같은 특정 연산이 가능한지 여부를 결정하기 때문에 중요합니다.

#### 인덱싱: 항목의 언어

행렬의 각 항목에는 두 개의 인덱스가 있습니다: 하나는 행, 다른 하나는 열입니다.

- $a_{ij}$ = 행 i, 열 j의 항목.
- 첫 번째 인덱스는 항상 행을, 두 번째는 열을 나타냅니다.

예를 들어,

$$
A = \begin{bmatrix} 
1 & 4 & 7 \\ 
2 & 5 & 8 \\ 
3 & 6 & 9 
\end{bmatrix},
$$

에서 우리는 다음을 가집니다:

- $a_{11} = 1$, $a_{23} = 8$, $a_{32} = 6$.

인덱싱은 행렬 언어의 문법입니다. 그것 없이는 위치를 지정하거나 공식을 명확하게 쓸 수 없습니다.

#### 벡터로서의 행과 열

행렬의 모든 행과 모든 열은 그 자체로 벡터입니다.

- i번째 행은 $A_{i,*}$로 씁니다.
- j번째 열은 $A_{*,j}$로 씁니다.

예:
위의 행렬에서,

- 첫 번째 행: (1, 4, 7).
- 두 번째 열: (4, 5, 6).

이 이중성은 강력합니다: 행은 종종 제약 조건이나 방정식을 나타내고, 열은 방향이나 특징을 나타냅니다. 나중에 행렬-벡터 곱을 해석할 때, A·x를 곱하는 것은 열을 결합하는 것을 의미하고, yᵀ·A를 곱하는 것은 행을 결합하는 것을 의미한다는 것을 알게 될 것입니다.

#### 부분 행렬

때로는 행렬의 일부만 원할 때가 있습니다. 부분 행렬은 특정 행과 열을 선택하여 형성됩니다.

예:
에서

$$
B = \begin{bmatrix} 
2 & 4 & 6 \\ 
1 & 3 & 5 \\ 
7 & 8 & 9 
\end{bmatrix},
$$

처음 두 행과 마지막 두 열의 부분 행렬은 다음과 같습니다:

$$
\begin{bmatrix} 
4 & 6 \\ 
3 & 5 
\end{bmatrix}.
$$

부분 행렬은 문제의 일부를 확대하고 분리할 수 있게 해줍니다.

#### 블록 행렬: 분할하여 정복하기

큰 행렬은 종종 블록으로 나눌 수 있으며, 이는 내부에 배열된 더 작은 부분 행렬입니다. 이것은 스프레드시트를 사분면으로 나누는 것과 같습니다.

예를 들어:

$$
C = \begin{bmatrix} 
A_{11} & A_{12} \\ 
A_{21} & A_{22} 
\end{bmatrix},
$$

여기서 각 $A_{ij}$는 그 자체로 더 작은 행렬입니다.

이 구조는 다음에 유용합니다:

- 계산: 알고리즘은 종종 개별 항목 대신 블록을 처리합니다.
- 이론: 많은 증명과 인수분해는 행렬을 블록으로 보는 것에 의존합니다(예: LU, QR, 슈어 분해).
- 응용: 데이터 테이블을 논리적 섹션으로 분할합니다.

예: 4×4 행렬을 네 개의 2×2 블록으로 나누면 "행렬의 행렬"로 취급하는 데 도움이 됩니다.

#### 특별한 모양

일부 행렬 모양은 너무 흔해서 이름이 붙여질 가치가 있습니다:

- 행벡터: 1×n 행렬.
- 열벡터: n×1 행렬.
- 대각 행렬: 대각선에만 0이 아닌 항목이 있습니다.
- 항등 행렬: 대각선에 1이 있는 정사각 대각 행렬.
- 영 행렬: 모든 항목이 0입니다.

이러한 모양을 인식하면 시간을 절약하고 추론을 명확하게 합니다.

#### 일상적인 비유

- 스프레드시트: 행렬은 각 셀에 행과 열 레이블이 있는 격자와 같습니다. 인덱싱을 사용하면 정확히 어떤 셀을 의미하는지 지정할 수 있습니다.
- 지도: 지도의 도시는 좌표(행, 열)로 위치를 찾을 수 있습니다. 동일한 논리가 행렬의 항목에도 적용됩니다.
- 레고 블록: 큰 레고 구조물이 더 작은 블록으로 만들어지는 것처럼, 큰 행렬은 종종 부분 행렬로 분할하여 분석됩니다.

#### 왜 중요한가

행렬 모양, 인덱싱 및 블록 보기에 대한 세심한 주의는 다음을 보장합니다:

1. 정밀성: 위치를 모호하지 않게 설명할 수 있습니다.
2. 구조 인식: 패턴(대각, 삼각, 블록)을 인식하면 더 효율적인 계산으로 이어집니다.
3. 확장성: 블록 분할은 행렬이 항목별로 처리하기에는 너무 큰 현대 수치 선형대수학 라이브러리의 기초입니다.
4. 기하학: 벡터로서의 행과 열은 행렬 구조를 생성(span), 기저 및 차원과 연결합니다.

이러한 기본 도구는 곱셈, 변환 및 인수분해를 준비합니다.

#### 직접 해보기

1. 3×4 행렬을 쓰고 행 2, 열 3의 항목을 레이블링하세요.
2. 선택한 4×4 행렬의 모서리에서 2×2 부분 행렬을 추출하세요.
3. 6×6 행렬을 네 개의 3×3 블록으로 나누세요. 어떻게 간결하게 표현할 수 있을까요?
4. 도전: 주어진

   $$
   D = \begin{bmatrix} 
   1 & 2 & 3 & 4 \\ 
   5 & 6 & 7 & 8 \\ 
   9 & 10 & 11 & 12 
   \end{bmatrix},
   $$

   왼쪽 상단에 2×2 블록, 오른쪽 상단에 2×2 블록, 그리고 맨 아래 행에 1×4 블록이 있는 블록 행렬로 작성하세요.

모양, 인덱싱 및 블록으로 연습함으로써, 행렬을 단지 원시 숫자 격자가 아니라 더 깊은 대수적 및 기하학적 통찰력을 위한 구조화된 객체로 탐색하는 능력을 개발하게 될 것입니다.

### 13. 행렬 덧셈과 스칼라 곱셈

행렬-벡터 및 행렬-행렬 곱셈을 탐구하기 전에, 행렬로 수행할 수 있는 가장 간단한 연산인 덧셈과 스칼라 곱셈을 이해하는 것이 필수적입니다. 이러한 연산은 벡터에 대해 배운 규칙을 확장하지만, 이제는 전체 숫자 격자에 적용됩니다. 간단하지만, 더 복잡한 대수적 조작의 기초이며 행렬을 벡터 공간의 요소로 확립하는 데 도움이 됩니다.

#### 행렬 덧셈: 항목별

두 행렬 $A$와 $B$가 같은 모양(같은 수의 행과 열)을 가지면, 해당하는 항목을 더하여 더할 수 있습니다.

공식적으로:
만약

$$
A = [a_{ij}], \quad B = [b_{ij}],
$$

이면

$$
A + B = [a_{ij} + b_{ij}].
$$

예:

$$
\begin{bmatrix} 
1 & 2 & 3 \\ 
4 & 5 & 6 
\end{bmatrix}
+
\begin{bmatrix} 
7 & 8 & 9 \\ 
10 & 11 & 12 
\end{bmatrix}
=
\begin{bmatrix} 
8 & 10 & 12 \\ 
14 & 16 & 18 
\end{bmatrix}.
$$

핵심 사항: 덧셈은 행렬이 같은 모양일 때만 정의됩니다. 2×3 행렬은 3×2 행렬에 더할 수 없습니다.

#### 스칼라 곱셈: 모든 항목 크기 조절

스칼라는 행렬의 모든 항목을 곱합니다.

공식적으로:
스칼라 $c$와 행렬 $A = [a_{ij}]$에 대해,

$$
cA = [c \cdot a_{ij}].
$$

예:

$$
3 \cdot 
\begin{bmatrix} 
2 & -1 \\ 
0 & 4 
\end{bmatrix}
=
\begin{bmatrix} 
6 & -3 \\ 
0 & 12 
\end{bmatrix}.
$$

이것은 벡터 크기 조절을 반영합니다: 전체 행렬을 상수 인자로 늘리거나 줄입니다.

#### 덧셈과 스칼라 곱셈의 속성

이 두 연산은 모든 m×n 행렬의 집합을 벡터 공간으로 만드는 익숙한 대수적 속성을 만족합니다:

1. 교환 법칙: $A + B = B + A$.
2. 결합 법칙: $(A + B) + C = A + (B + C)$.
3. 덧셈 항등원: $A + 0 = A$, 여기서 0은 영 행렬입니다.
4. 덧셈 역원: 모든 $A$에 대해, $A + (-A) = 0$이 되는 $-A$가 존재합니다.
5. 분배 법칙: $c(A + B) = cA + cB$.
6. 호환성: $(c + d)A = cA + dA$.
7. 스칼라 결합 법칙: $(cd)A = c(dA)$.
8. 단위 스칼라: $1A = A$.

이들은 행렬로 작업하는 것이 숫자와 벡터로 작업하는 것과 같이 느껴지도록 보장하며, 단지 더 높은 수준의 설정에서만 그렇습니다.

#### 표 연산으로서의 행렬 산술

표 관점에서, 덧셈과 스칼라 곱셈은 단지 간단한 장부 정리입니다: 같은 모양의 두 표를 정렬하고 항목별로 더하거나, 전체 표를 상수로 곱합니다.

예: 월별 지출의 두 스프레드시트를 상상해 보세요. 그것들을 더하면 합산된 총액이 나옵니다. 12를 곱하면 월별 표가 연간 추정치로 변환됩니다.

#### 기계 연산으로서의 행렬 산술

기계 관점에서, 이러한 연산은 선형 변환의 동작을 조정합니다:

- 행렬을 더하는 것은 벡터에 적용될 때 그 효과를 더하는 것에 해당합니다.
- 행렬을 크기 조절하는 것은 변환의 효과를 크기 조절합니다.

예:
$A$가 벡터를 약간 회전시키고, $B$가 벡터를 늘린다고 합시다. 행렬 $A + B$는 두 영향을 함께 적용하는 변환을 나타냅니다. 2로 크기 조절하면 변환의 효과가 두 배가 됩니다.

#### 특별한 경우: 영과 항등

- 영 행렬: 모든 항목이 0입니다. 어떤 행렬에 더해도 아무것도 변하지 않습니다.
- 항등 행렬의 스칼라 배수: $cI$는 적용될 때 모든 벡터를 c만큼 크기 조절합니다. 예를 들어, $2I$는 모든 벡터의 길이를 두 배로 늘립니다.

이들은 행렬 산술에서 중립 또는 크기 조절 요소로 작용합니다.

#### 기하학적 직관

1. $\mathbb{R}^2$ 또는 $\mathbb{R}^3$에서, 변환 행렬을 더하는 것은 기하학적 효과를 중첩하는 것과 같습니다: 예: 한 행렬은 전단하고, 다른 행렬은 회전하며, 그 합은 둘 다를 섞습니다.
2. 변환을 크기 조절하면 그 작용이 더 강해지거나 약해집니다. 전단을 두 배로 하면 두 배로 두드러집니다.

이것은 곱셈 이전에도 덧셈과 크기 조절이 이미 기하학적 의미를 가지고 있음을 보여줍니다.

#### 일상적인 비유

- 레시피: 두 레시피(행렬)를 재료별로 더하면 결합된 쇼핑 목록이 나옵니다. 레시피에 3을 곱하면 3배 많은 사람들을 위해 크기를 조절합니다.
- 재무 계획: 두 예산 표를 더하면 결합된 예산이 나옵니다. 12를 곱하면 월별 비용을 연간 총액으로 크기 조절합니다.
- 효과 혼합: 행렬로 표현된 오디오 신호를 생각해 보세요. 그것들을 더하면 소리가 중첩되고, 크기를 조절하면 볼륨이 조정됩니다.

#### 왜 중요한가

간단하지만, 이러한 연산은:

- 행렬을 벡터 공간의 요소로 정의합니다.
- 고유값 문제, 최적화 및 제어 이론에서 중요한 행렬의 선형 결합을 위한 기초를 마련합니다.
- 모듈식 문제 해결을 가능하게 합니다: 큰 변환을 더 작은 변환으로 나누고 재결합합니다.
- 데이터셋 결합에서 변환 크기 조절에 이르기까지 실제 모든 곳에 나타납니다.

덧셈과 스칼라 곱셈이 없다면, 우리는 행렬을 대수적 객체로서 체계적으로 다룰 수 없을 것입니다.

#### 직접 해보기

1. 더하기

$$
\begin{bmatrix} 
2 & 0 \\ 
1 & 3 
\end{bmatrix}
\quad \text{와} \quad
\begin{bmatrix} 
-2 & 5 \\ 
4 & -3 
\end{bmatrix}.
$$

2. 곱하기

$$
\begin{bmatrix} 
1 & -1 & 2 \\ 
0 & 3 & 4 
\end{bmatrix}
$$

에 –2를 곱하세요.

3. 명시적인 2×2 행렬로 (A + B) + C = A + (B + C)를 보여주세요.

4. 도전: A + B = 0이 되는 두 개의 3×3 행렬 A와 B를 구성하세요. 그것이 B에 대해 무엇을 알려주나요?

이러한 기본 사항을 연습함으로써, 행렬에 대한 가장 기본적인 연산조차도 행렬 곱셈, 변환 및 인수분해와 같은 더 깊은 결과를 위한 대수적 근간을 이미 구축하고 있음을 알게 될 것입니다.

### 14. 행렬-벡터 곱 (열의 선형 결합)

이제 우리는 선형대수학의 모든 것에서 가장 중요한 연산 중 하나인 행렬-벡터 곱에 도달했습니다. 이 연산은 행렬 $A$와 벡터 x를 취하여 새로운 벡터를 생성합니다. 계산은 간단하지만, 그 해석은 깊습니다: 행을 결합하는 것으로, 열을 결합하는 것으로, 또는 선형 변환을 적용하는 것으로 볼 수 있습니다. 이것이 행렬을 벡터 공간의 기하학과 연결하는 연산입니다.

#### 대수적 규칙

$A$가 $m \times n$ 행렬이고, x가 $\mathbb{R}^n$의 벡터라고 가정합니다. 곱 $A\mathbf{x}$는 $\mathbb{R}^m$의 벡터이며, 다음과 같이 정의됩니다:

$$
A = 
\begin{bmatrix} 
a_{11} & a_{12} & \cdots & a_{1n} \\ 
a_{21} & a_{22} & \cdots & a_{2n} \\ 
\vdots & \vdots & \ddots & \vdots \\ 
a_{m1} & a_{m2} & \cdots & a_{mn} 
\end{bmatrix}, 
\quad
\mathbf{x} = 
\begin{bmatrix} 
x_1 \\ x_2 \\ \vdots \\ x_n
\end{bmatrix}.
$$

그러면:

$$
A\mathbf{x} =
\begin{bmatrix} 
a_{11}x_1 + a_{12}x_2 + \cdots + a_{1n}x_n \\ 
a_{21}x_1 + a_{22}x_2 + \cdots + a_{2n}x_n \\ 
\vdots \\ 
a_{m1}x_1 + a_{m2}x_2 + \cdots + a_{mn}x_n
\end{bmatrix}.
$$

출력의 각 항목은 $A$의 한 행과 벡터 x 사이의 내적입니다.

#### 행 관점: 내적

행 관점에서, $A\mathbf{x}$는 행별로 계산됩니다:

- $A$의 각 행을 가져옵니다.
- x와 내적합니다.
- 그 결과가 출력의 한 항목이 됩니다.

예:

$$
A =
\begin{bmatrix} 
2 & 1 \\ 
3 & 4 \\ 
-1 & 2 
\end{bmatrix}, \quad
\mathbf{x} =
\begin{bmatrix} 
5 \\ 
-1
\end{bmatrix}.
$$

- 첫 번째 행 내적 x: $2(5) + 1(-1) = 9$.
- 두 번째 행 내적 x: $3(5) + 4(-1) = 11$.
- 세 번째 행 내적 x: $(-1)(5) + 2(-1) = -7$.

따라서:

$$
A\mathbf{x} = 
\begin{bmatrix} 
9 \\ 11 \\ -7
\end{bmatrix}.
$$

#### 열 관점: 선형 결합

열 관점에서, $A\mathbf{x}$는 A의 열의 선형 결합입니다.

만약

$$
A = 
\begin{bmatrix} 
| & | &  & | \\ 
a_1 & a_2 & \cdots & a_n \\ 
| & | &  & |
\end{bmatrix}, 
\quad
\mathbf{x} =
\begin{bmatrix} 
x_1 \\ x_2 \\ \vdots \\ x_n
\end{bmatrix},
$$

이면:

$$
A\mathbf{x} = x_1 a_1 + x_2 a_2 + \cdots + x_n a_n.
$$

즉: $A$의 각 열을 x의 해당 항목으로 곱한 다음, 더합니다.

이 해석은 생성(span)의 아이디어와 직접 연결됩니다: x가 변함에 따라 모든 벡터 $A\mathbf{x}$의 집합은 정확히 $A$의 열의 생성(span)입니다.

#### 기계 관점: 선형 변환

기계 관점은 모든 것을 함께 묶습니다: 벡터에 행렬을 곱하는 것은 행렬이 나타내는 선형 변환을 적용하는 것을 의미합니다.

- $A$가 2×2 회전 행렬이면, $A\mathbf{x}$는 벡터 x를 회전시킵니다.
- $A$가 크기 조절 행렬이면, $A\mathbf{x}$는 x를 늘리거나 줄입니다.
- $A$가 투영 행렬이면, $A\mathbf{x}$는 x를 선이나 평면에 투영합니다.

따라서 대수적 정의는 기하학적 및 기능적 의미를 인코딩합니다.

#### 기하학적 작용의 예

1. 크기 조절:

$$
A = \begin{bmatrix} 2 & 0 \\ 0 & 2 \end{bmatrix}.
$$

그러면 $A\mathbf{x}$는 모든 벡터 x의 길이를 두 배로 늘립니다.

2. 반사:

$$
A = \begin{bmatrix} 1 & 0 \\ 0 & -1 \end{bmatrix}.
$$

이것은 벡터를 x축에 대해 뒤집습니다.

3. θ만큼 회전:

$$
A = \begin{bmatrix} \cosθ & -\sinθ \\ \sinθ & \cosθ \end{bmatrix}.
$$

이것은 평면에서 벡터를 시계 반대 방향으로 θ만큼 회전시킵니다.

#### 일상적인 비유

- 재료 혼합: 벡터 x는 레시피이고, $A$의 열은 재료입니다. 곱 $A\mathbf{x}$는 최종 혼합물입니다.
- 가중 평균: 학생의 최종 성적은 행렬-벡터 곱입니다: 가중치(벡터)에 점수(행렬 열)를 곱합니다.
- 신호 처리: 입력 신호를 가중치와 결합하면 새로운 출력이 생성되며, 이는 가중치 벡터에 신호 행렬을 곱하는 것과 같습니다.

#### 왜 중요한가

행렬-벡터 곱은 선형대수학의 모든 것의 구성 요소입니다:

1. 행렬의 작용을 선형 맵으로 정의합니다.
2. 생성(span) 및 차원과 직접 연결됩니다(열은 모든 가능한 출력을 생성합니다).
3. 선형 시스템 해결, 고유값 문제 및 분해를 뒷받침합니다.
4. 컴퓨터 그래픽스에서 기계 학습에 이르기까지 응용 수학의 계산 엔진입니다(예: 신경망은 수십억 개의 행렬-벡터 곱을 계산합니다).

#### 직접 해보기

1. 계산하기

$$
\begin{bmatrix} 
1 & 2 & 3 \\ 
4 & 5 & 6 
\end{bmatrix}
\begin{bmatrix} 
2 \\ 
0 \\ 
1 
\end{bmatrix}.
$$

2. 위 곱의 결과를 행렬의 열의 선형 결합으로 표현하세요.

3. 벡터를 선 $y = x$에 대해 반사하는 2×2 행렬을 구성하세요. (1, 0)과 (0, 1)에 대해 테스트하세요.

4. 도전: 3×3 행렬에 대해, 모든 가능한 $A\mathbf{x}$(x가 변함에 따라)의 집합이 정확히 $A$의 열 공간임을 보여주세요.

행렬-벡터 곱의 계산 규칙과 해석을 모두 마스터함으로써, 선형대수학에서 가장 중요한 통찰력을 얻게 될 것입니다: 행렬은 단지 표가 아니라 공간을 변환하는 엔진입니다.

### 15. 행렬-행렬 곱 (선형 단계의 구성)

행렬이 벡터에 어떻게 작용하는지 이해했으므로, 다음 자연스러운 단계는 한 행렬이 다른 행렬에 어떻게 작용하는지 이해하는 것입니다. 이것은 우리를 두 행렬을 단일 새 행렬로 결합하는 규칙인 행렬-행렬 곱으로 이끕니다. 산술은 처음에는 복잡해 보이지만, 기본 아이디어는 우아합니다: 두 행렬을 곱하는 것은 두 선형 변환을 구성하는 것을 나타냅니다.

#### 대수적 규칙

$A$가 $m \times n$ 행렬이고 $B$가 $n \times p$ 행렬이라고 가정합니다. 그들의 곱 $C = AB$는 $m \times p$ 행렬이며 다음과 같이 정의됩니다:

$$
c_{ij} = \sum_{k=1}^n a_{ik} b_{kj}.
$$

즉: $C$의 각 항목은 $A$의 i번째 행과 $B$의 j번째 열의 내적입니다.

#### 예: 2×3 곱하기 3×2

$$
A = 
\begin{bmatrix} 
1 & 2 & 3 \\ 
4 & 5 & 6 
\end{bmatrix}, \quad 
B = 
\begin{bmatrix} 
7 & 8 \\ 
9 & 10 \\ 
11 & 12 
\end{bmatrix}.
$$

곱: $C = AB$는 2×2가 될 것입니다.

- $c_{11} = 1\cdot 7 + 2\cdot 9 + 3\cdot 11 = 58$.
- $c_{12} = 1\cdot 8 + 2\cdot 10 + 3\cdot 12 = 64$.
- $c_{21} = 4\cdot 7 + 5\cdot 9 + 6\cdot 11 = 139$.
- $c_{22} = 4\cdot 8 + 5\cdot 10 + 6\cdot 12 = 154$.

따라서:

$$
C = 
\begin{bmatrix} 
58 & 64 \\ 
139 & 154 
\end{bmatrix}.
$$

#### 열 관점: 열의 선형 결합

열 관점에서, $AB$는 $A$를 $B$의 각 열에 적용하여 계산됩니다.

$B = [b_1 \; b_2 \; \cdots \; b_p]$이면:

$$
AB = [A b_1 \; A b_2 \; \cdots \; A b_p].
$$

즉: $A$를 $B$의 각 열로 곱합니다. 이것은 종종 곱을 생각하는 가장 간단한 방법입니다.

#### 행 관점: 행의 선형 결합

행 관점에서, $AB$의 각 행은 $A$의 한 행의 계수를 사용하여 $B$의 행을 결합하여 형성됩니다. 이 이중 관점은 덜 일반적이지만, 특히 증명과 알고리즘에서 똑같이 유용합니다.

#### 기계 관점: 변환의 구성

가장 중요한 해석은 기계 관점입니다: 행렬을 곱하는 것은 변환을 구성하는 것에 해당합니다.

- $A$가 $\mathbb{R}^n \to \mathbb{R}^m$을 매핑하고 $B$가 $\mathbb{R}^p \to \mathbb{R}^n$을 매핑하면, $AB$는 $\mathbb{R}^p \to \mathbb{R}^m$을 매핑합니다.
- 즉: $B$를 먼저 하고, 그 다음에 $A$를 합니다.

예:

- $B$가 벡터를 90° 회전시킨다고 합시다.
- $A$가 벡터를 2배로 크기 조절한다고 합시다.
- 그러면 $AB$는 회전한 다음 크기를 조절합니다 - 두 단계가 단일 변환으로 결합됩니다.

#### 기하학적 예

1. 크기 조절 후 회전:

$$
A = \begin{bmatrix} 2 & 0 \\ 0 & 2 \end{bmatrix}, \quad 
B = \begin{bmatrix} 0 & -1 \\ 1 & 0 \end{bmatrix}.
$$

그러면 $AB$는 벡터를 90° 회전시킨 후 2배로 크기를 조절합니다.

2. 투영 후 반사:
   $B$가 x축에 투영하고 $A$가 y축에 대해 반사하면, $AB$는 "투영 후 반사"를 나타냅니다.

#### 행렬 곱셈의 속성

1. 결합 법칙: $(AB)C = A(BC)$.
2. 분배 법칙: $A(B + C) = AB + AC$.
3. 교환 법칙 아님: 일반적으로, $AB \neq BA$. 순서가 중요합니다!
4. 항등원: $AI = IA = A$.

이러한 속성은 곱셈이 구조화되어 있지만 대칭적이지는 않다는 것을 강조합니다. 순서는 변환의 연산 순서를 인코딩합니다.

#### 일상적인 비유

- 요리 단계: $B$가 "야채 다지기"이고 $A$가 "야채 요리하기"이면, $AB$는 "다진 후 요리하기"입니다. 다른 순서(BA)로 하면 의미가 없습니다!
- 조립 라인: 각 기계(행렬)는 입력에 대한 연산을 수행합니다. 그것들을 연결하는 것은 행렬을 곱하는 것에 해당합니다.
- 지도와 경로: 집에서 역으로(B), 그리고 역에서 사무실로(A) 가는 것은 결합된 경로 집→사무실(AB)과 같습니다.

#### 왜 중요한가

행렬 곱셈은 선형대수학의 핵심입니다, 왜냐하면:

1. 함수 구성을 대수적 형태로 인코딩합니다.
2. 여러 변환을 단일 행렬에 포착하는 방법을 제공합니다.
3. 컴퓨터 그래픽스, 로봇 공학, 통계 및 기계 학습의 알고리즘을 뒷받침합니다.
4. 실제 세계의 연산 순서를 반영하는 교환 법칙 실패와 같은 더 깊은 구조를 드러냅니다.

방정식 해결, 고유값 계산, 신경망 훈련 등 선형대수학의 거의 모든 응용 프로그램은 효율적인 행렬 곱셈에 의존합니다.

#### 직접 해보기

1. 계산하기

$$
\begin{bmatrix} 
1 & 0 \\ 
2 & 3 
\end{bmatrix}
\begin{bmatrix} 
4 & 5 \\ 
6 & 7 
\end{bmatrix}.
$$

2. 다음 행렬에 대해 $AB \neq BA$임을 보여주세요

$$
A = \begin{bmatrix} 0 & 1 \\ 0 & 0 \end{bmatrix}, 
\quad 
B = \begin{bmatrix} 0 & 0 \\ 1 & 0 \end{bmatrix}.
$$

3. $AB = BA$인 두 개의 2×2 행렬을 구성하세요. 여기서 교환 법칙이 발생하는 이유는 무엇인가요?

4. 도전: $A$가 투영이고 $B$가 회전이면, $AB$와 $BA$를 계산하세요. 그들이 동일한 기하학적 연산을 나타내나요?

이러한 관점을 통해, 행렬-행렬 곱은 기계적인 공식에서 선형 단계를 결합하는 언어로 바뀝니다 - 각 곱은 "이것을 하고, 그 다음에 저것을 하라"는 이야기를 들려줍니다.

### 16. 항등, 역행렬 및 전치

덧셈, 스칼라 곱셈 및 행렬 곱셈이 제자리에 있으면, 이제 우리는 행렬 대수의 근간을 형성하는 세 가지 특별한 연산과 객체를 소개합니다: 항등 행렬, 행렬의 역행렬 및 행렬의 전치. 각각은 중립성, 가역성 및 대칭성이라는 근본적인 원리를 포착하며, 함께 선형대수학을 매우 강력하게 만드는 대수적 구조를 제공합니다.

#### 항등 행렬

항등 행렬은 곱셈에서 숫자 1과 동등한 행렬입니다.

- 정의: 항등 행렬 $I_n$은 대각선에 1이 있고 다른 모든 곳에 0이 있는 $n \times n$ 행렬입니다.

예 (3×3):

$$
I_3 = \begin{bmatrix} 
1 & 0 & 0 \\ 
0 & 1 & 0 \\ 
0 & 0 & 1 
\end{bmatrix}.
$$

- 속성: 임의의 $n \times n$ 행렬 $A$에 대해,

  $$
  AI_n = I_nA = A.
  $$

- 기계 관점: $I$는 아무것도 하지 않습니다 - 모든 벡터를 자신에게 매핑합니다.

#### 행렬의 역행렬

역행렬은 숫자의 역수와 동등한 행렬입니다.

- 정의: 정사각 행렬 $A$에 대해, 그 역행렬 $A^{-1}$은 다음을 만족하는 행렬입니다

  $$
  AA^{-1} = A^{-1}A = I.
  $$

- 모든 행렬이 역행렬을 갖는 것은 아닙니다. 행렬은 정사각이고 행렬식이 0이 아닐 때만 가역적입니다.

예:

$$
A = \begin{bmatrix} 
2 & 1 \\ 
1 & 1 
\end{bmatrix}, 
\quad 
A^{-1} = \begin{bmatrix} 
1 & -1 \\ 
-1 & 2 
\end{bmatrix}.
$$

확인:
